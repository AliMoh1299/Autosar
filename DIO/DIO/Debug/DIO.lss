
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000348  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e46  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000794  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c8  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000670  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000670  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  7a:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_init>:
	/*PD6*/		{PORT_PIN_OUT,STD_low},
	/*PD7*/		{PORT_PIN_OUT,STD_low},
};

void Dio_init()
{
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
  86:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	50 e0       	ldi	r21, 0x00	; 0
void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
	{
		
	  Dio_PortType channel_port=i/8;
  8c:	98 2f       	mov	r25, r24
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
   	  Dio_ChannelType channelPos=i%8;		
  94:	38 2f       	mov	r19, r24
  96:	37 70       	andi	r19, 0x07	; 7
	if(Dio_pin_config[i].pinDirection ==PORT_PIN_OUT)
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	a1 f5       	brne	.+104    	; 0x106 <Dio_init+0x84>
	{
		switch(channel_port)
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	89 f0       	breq	.+34     	; 0xc4 <Dio_init+0x42>
  a2:	28 f0       	brcs	.+10     	; 0xae <Dio_init+0x2c>
  a4:	92 30       	cpi	r25, 0x02	; 2
  a6:	c9 f0       	breq	.+50     	; 0xda <Dio_init+0x58>
  a8:	93 30       	cpi	r25, 0x03	; 3
  aa:	11 f1       	breq	.+68     	; 0xf0 <Dio_init+0x6e>
  ac:	63 c0       	rjmp	.+198    	; 0x174 <Dio_init+0xf2>
	{
		case Dio_Port_A:
		SET_BIT(DDRA_REG,channelPos);
  ae:	9a b3       	in	r25, 0x1a	; 26
  b0:	ba 01       	movw	r22, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_init+0x36>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	3a 95       	dec	r19
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_init+0x32>
  bc:	9b 01       	movw	r18, r22
  be:	29 2b       	or	r18, r25
  c0:	2a bb       	out	0x1a, r18	; 26
		break;
  c2:	58 c0       	rjmp	.+176    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_B:
		SET_BIT(DDRB_REG,channelPos);
  c4:	97 b3       	in	r25, 0x17	; 23
  c6:	ba 01       	movw	r22, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <Dio_init+0x4c>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	3a 95       	dec	r19
  d0:	e2 f7       	brpl	.-8      	; 0xca <Dio_init+0x48>
  d2:	9b 01       	movw	r18, r22
  d4:	29 2b       	or	r18, r25
  d6:	27 bb       	out	0x17, r18	; 23
		break;
  d8:	4d c0       	rjmp	.+154    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_C:
		SET_BIT(DDRC_REG,channelPos);
  da:	94 b3       	in	r25, 0x14	; 20
  dc:	ba 01       	movw	r22, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Dio_init+0x62>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	3a 95       	dec	r19
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Dio_init+0x5e>
  e8:	9b 01       	movw	r18, r22
  ea:	29 2b       	or	r18, r25
  ec:	24 bb       	out	0x14, r18	; 20
		break;
  ee:	42 c0       	rjmp	.+132    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_D:
		SET_BIT(DDRD_REG,channelPos);
  f0:	91 b3       	in	r25, 0x11	; 17
  f2:	ba 01       	movw	r22, r20
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Dio_init+0x78>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	3a 95       	dec	r19
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Dio_init+0x74>
  fe:	9b 01       	movw	r18, r22
 100:	29 2b       	or	r18, r25
 102:	21 bb       	out	0x11, r18	; 17
		break;
 104:	37 c0       	rjmp	.+110    	; 0x174 <Dio_init+0xf2>
	}
		}
		else
		{
			switch (channel_port)
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	91 f0       	breq	.+36     	; 0x12e <Dio_init+0xac>
 10a:	28 f0       	brcs	.+10     	; 0x116 <Dio_init+0x94>
 10c:	92 30       	cpi	r25, 0x02	; 2
 10e:	d9 f0       	breq	.+54     	; 0x146 <Dio_init+0xc4>
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	29 f1       	breq	.+74     	; 0x15e <Dio_init+0xdc>
 114:	2f c0       	rjmp	.+94     	; 0x174 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	ba 01       	movw	r22, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Dio_init+0x9e>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	3a 95       	dec	r19
 122:	e2 f7       	brpl	.-8      	; 0x11c <Dio_init+0x9a>
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	92 23       	and	r25, r18
 12a:	9a bb       	out	0x1a, r25	; 26
				break;
 12c:	23 c0       	rjmp	.+70     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	ba 01       	movw	r22, r20
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_init+0xb6>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	3a 95       	dec	r19
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_init+0xb2>
 13c:	96 2f       	mov	r25, r22
 13e:	90 95       	com	r25
 140:	92 23       	and	r25, r18
 142:	97 bb       	out	0x17, r25	; 23
				break;
 144:	17 c0       	rjmp	.+46     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,channelPos);
 146:	24 b3       	in	r18, 0x14	; 20
 148:	ba 01       	movw	r22, r20
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Dio_init+0xce>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	3a 95       	dec	r19
 152:	e2 f7       	brpl	.-8      	; 0x14c <Dio_init+0xca>
 154:	96 2f       	mov	r25, r22
 156:	90 95       	com	r25
 158:	92 23       	and	r25, r18
 15a:	94 bb       	out	0x14, r25	; 20
				break;
 15c:	0b c0       	rjmp	.+22     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,channelPos);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	ba 01       	movw	r22, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_init+0xe6>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	3a 95       	dec	r19
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_init+0xe2>
 16c:	96 2f       	mov	r25, r22
 16e:	90 95       	com	r25
 170:	92 23       	and	r25, r18
 172:	91 bb       	out	0x11, r25	; 17
	/*PD7*/		{PORT_PIN_OUT,STD_low},
};

void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	32 96       	adiw	r30, 0x02	; 2
 178:	80 32       	cpi	r24, 0x20	; 32
 17a:	09 f0       	breq	.+2      	; 0x17e <Dio_init+0xfc>
 17c:	87 cf       	rjmp	.-242    	; 0x8c <Dio_init+0xa>
				CLR_BIT(DDRD_REG,channelPos);
				break;
			}
		  }
		}
	}
 17e:	08 95       	ret

00000180 <Dio_WritePort>:
#include "STD_Types.h"
#include "bit_math.h"

void Dio_WritePort(Dio_PortType portx,uint8 uxvalue)
{
	switch (portx)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	41 f0       	breq	.+16     	; 0x194 <Dio_WritePort+0x14>
 184:	28 f0       	brcs	.+10     	; 0x190 <Dio_WritePort+0x10>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	39 f0       	breq	.+14     	; 0x198 <Dio_WritePort+0x18>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	39 f0       	breq	.+14     	; 0x19c <Dio_WritePort+0x1c>
 18e:	08 95       	ret
	{
		case Dio_Port_A :
		PORTA_REG=uxvalue;
 190:	6b bb       	out	0x1b, r22	; 27
		break;
 192:	08 95       	ret
		
		case Dio_Port_B :
		PORTB_REG=uxvalue;
 194:	68 bb       	out	0x18, r22	; 24
		break;
 196:	08 95       	ret
		
		case Dio_Port_C :
		PORTC_REG=uxvalue;
 198:	65 bb       	out	0x15, r22	; 21
		break;
 19a:	08 95       	ret
		
		case Dio_Port_D :
		PORTD_REG=uxvalue;
 19c:	62 bb       	out	0x12, r22	; 18
 19e:	08 95       	ret

000001a0 <Dio_WriteChannel>:
}

void Dio_WriteChannel(Dio_ChannelType channel,STD_levelType level)
{
			Dio_PortType channel_port=channel/8;     // Determine Port A,B,C,D
			Dio_ChannelType ChannelPos =channel%8;  //Determine Which Pin In Port A,B,C,D
 1a0:	98 2f       	mov	r25, r24
 1a2:	97 70       	andi	r25, 0x07	; 7

	
	switch(channel_port){
 1a4:	86 95       	lsr	r24
 1a6:	86 95       	lsr	r24
 1a8:	86 95       	lsr	r24
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	21 f1       	breq	.+72     	; 0x1f6 <Dio_WriteChannel+0x56>
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <Dio_WriteChannel+0x1c>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	f1 f1       	breq	.+124    	; 0x230 <Dio_WriteChannel+0x90>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	09 f4       	brne	.+2      	; 0x1ba <Dio_WriteChannel+0x1a>
 1b8:	58 c0       	rjmp	.+176    	; 0x26a <Dio_WriteChannel+0xca>
 1ba:	08 95       	ret
		case Dio_Port_A:
		if(level == STD_low)
 1bc:	61 11       	cpse	r22, r1
 1be:	0e c0       	rjmp	.+28     	; 0x1dc <Dio_WriteChannel+0x3c>
		{
			CLR_BIT(PORTA_REG,ChannelPos );
 1c0:	4b b3       	in	r20, 0x1b	; 27
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_WriteChannel+0x2e>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	9a 95       	dec	r25
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_WriteChannel+0x2a>
 1d2:	cb 01       	movw	r24, r22
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTA_REG,ChannelPos );
 1dc:	4b b3       	in	r20, 0x1b	; 27
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <Dio_WriteChannel+0x4a>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	9a 95       	dec	r25
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <Dio_WriteChannel+0x46>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	08 95       	ret
		}
		break;
		case Dio_Port_B:
		if(level == STD_low)
 1f6:	61 11       	cpse	r22, r1
 1f8:	0e c0       	rjmp	.+28     	; 0x216 <Dio_WriteChannel+0x76>
		{
			CLR_BIT(PORTB_REG,ChannelPos );
 1fa:	48 b3       	in	r20, 0x18	; 24
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <Dio_WriteChannel+0x68>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	9a 95       	dec	r25
 20a:	e2 f7       	brpl	.-8      	; 0x204 <Dio_WriteChannel+0x64>
 20c:	cb 01       	movw	r24, r22
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTB_REG,ChannelPos );
 216:	48 b3       	in	r20, 0x18	; 24
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <Dio_WriteChannel+0x84>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	9a 95       	dec	r25
 226:	e2 f7       	brpl	.-8      	; 0x220 <Dio_WriteChannel+0x80>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	08 95       	ret
		}
		break;
		case Dio_Port_C:
		if(level == STD_low)
 230:	61 11       	cpse	r22, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <Dio_WriteChannel+0xb0>
		{
			CLR_BIT(PORTC_REG,ChannelPos );
 234:	45 b3       	in	r20, 0x15	; 21
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Dio_WriteChannel+0xa2>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	9a 95       	dec	r25
 244:	e2 f7       	brpl	.-8      	; 0x23e <Dio_WriteChannel+0x9e>
 246:	cb 01       	movw	r24, r22
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTC_REG,ChannelPos );
 250:	45 b3       	in	r20, 0x15	; 21
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <Dio_WriteChannel+0xbe>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	9a 95       	dec	r25
 260:	e2 f7       	brpl	.-8      	; 0x25a <Dio_WriteChannel+0xba>
 262:	cb 01       	movw	r24, r22
 264:	84 2b       	or	r24, r20
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret
		}
		break;
		case Dio_Port_D:
		if(level == STD_low)
 26a:	61 11       	cpse	r22, r1
 26c:	0e c0       	rjmp	.+28     	; 0x28a <Dio_WriteChannel+0xea>
		{
			CLR_BIT(PORTD_REG,ChannelPos );
 26e:	42 b3       	in	r20, 0x12	; 18
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <Dio_WriteChannel+0xdc>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	9a 95       	dec	r25
 27e:	e2 f7       	brpl	.-8      	; 0x278 <Dio_WriteChannel+0xd8>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	82 bb       	out	0x12, r24	; 18
 288:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTD_REG,ChannelPos );
 28a:	42 b3       	in	r20, 0x12	; 18
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <Dio_WriteChannel+0xf8>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	9a 95       	dec	r25
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Dio_WriteChannel+0xf4>
 29c:	cb 01       	movw	r24, r22
 29e:	84 2b       	or	r24, r20
 2a0:	82 bb       	out	0x12, r24	; 18
 2a2:	08 95       	ret

000002a4 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main()
{
	Dio_init();
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_init>
		while(1)
	{ 
         Dio_WritePort(Dio_Port_D,0xF0);
 2a8:	60 ef       	ldi	r22, 0xF0	; 240
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	83 ed       	ldi	r24, 0xD3	; 211
 2b4:	90 e3       	ldi	r25, 0x30	; 48
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x12>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x1c>
 2c0:	00 00       	nop
    _delay_ms(1000);
         Dio_WritePort(Dio_Port_D,0x00);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WritePort>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	87 ea       	ldi	r24, 0xA7	; 167
 2ce:	91 e6       	ldi	r25, 0x61	; 97
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x2c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x36>
 2da:	00 00       	nop
	_delay_ms(2000);
	  	 Dio_WriteChannel(Dio_Channel_D7,STD_high);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	89 e6       	ldi	r24, 0x69	; 105
 2e8:	98 e1       	ldi	r25, 0x18	; 24
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x46>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x50>
 2f4:	00 00       	nop
	_delay_ms(500);
		 Dio_WriteChannel(Dio_Channel_D7,STD_low);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
		 Dio_WriteChannel(Dio_Channel_D6,STD_high);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	8e e1       	ldi	r24, 0x1E	; 30
 302:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	89 e6       	ldi	r24, 0x69	; 105
 30a:	98 e1       	ldi	r25, 0x18	; 24
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x68>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x72>
 316:	00 00       	nop
	_delay_ms(500);
		 Dio_WriteChannel(Dio_Channel_D6,STD_low);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	8e e1       	ldi	r24, 0x1E	; 30
 31c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
		 Dio_WriteChannel(Dio_Channel_D5,STD_high);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	8d e1       	ldi	r24, 0x1D	; 29
 324:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	89 e6       	ldi	r24, 0x69	; 105
 32c:	98 e1       	ldi	r25, 0x18	; 24
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x8a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x94>
 338:	00 00       	nop
	_delay_ms(500);
	     Dio_WriteChannel(Dio_Channel_D5,STD_low);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	8d e1       	ldi	r24, 0x1D	; 29
 33e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
 342:	b2 cf       	rjmp	.-156    	; 0x2a8 <main+0x4>

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
