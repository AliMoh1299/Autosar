
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3e  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046e  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000609  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000526  00000000  00000000  0000234d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  7a:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_init>:
	/*PD6*/		{Output,STD_low},
	/*PD7*/		{Output,STD_low},
};

void Dio_init()
{
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
  86:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	50 e0       	ldi	r21, 0x00	; 0
void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
	{
		
	  Dio_PortType channel_port=i/8;
  8c:	98 2f       	mov	r25, r24
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
   	  Dio_ChannelType channelPos=i%8;		
  94:	38 2f       	mov	r19, r24
  96:	37 70       	andi	r19, 0x07	; 7
	if(Dio_pin_config[i].pinDirection ==Output)
  98:	20 81       	ld	r18, Z
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	a1 f5       	brne	.+104    	; 0x106 <Dio_init+0x84>
	{
		switch(channel_port)
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	89 f0       	breq	.+34     	; 0xc4 <Dio_init+0x42>
  a2:	28 f0       	brcs	.+10     	; 0xae <Dio_init+0x2c>
  a4:	92 30       	cpi	r25, 0x02	; 2
  a6:	c9 f0       	breq	.+50     	; 0xda <Dio_init+0x58>
  a8:	93 30       	cpi	r25, 0x03	; 3
  aa:	11 f1       	breq	.+68     	; 0xf0 <Dio_init+0x6e>
  ac:	63 c0       	rjmp	.+198    	; 0x174 <Dio_init+0xf2>
	{
		case Dio_Port_A:
		SET_BIT(DDRA_REG,channelPos);
  ae:	9a b3       	in	r25, 0x1a	; 26
  b0:	ba 01       	movw	r22, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_init+0x36>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	3a 95       	dec	r19
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_init+0x32>
  bc:	9b 01       	movw	r18, r22
  be:	29 2b       	or	r18, r25
  c0:	2a bb       	out	0x1a, r18	; 26
		break;
  c2:	58 c0       	rjmp	.+176    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_B:
		SET_BIT(DDRB_REG,channelPos);
  c4:	97 b3       	in	r25, 0x17	; 23
  c6:	ba 01       	movw	r22, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <Dio_init+0x4c>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	3a 95       	dec	r19
  d0:	e2 f7       	brpl	.-8      	; 0xca <Dio_init+0x48>
  d2:	9b 01       	movw	r18, r22
  d4:	29 2b       	or	r18, r25
  d6:	27 bb       	out	0x17, r18	; 23
		break;
  d8:	4d c0       	rjmp	.+154    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_C:
		SET_BIT(DDRC_REG,channelPos);
  da:	94 b3       	in	r25, 0x14	; 20
  dc:	ba 01       	movw	r22, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Dio_init+0x62>
  e0:	66 0f       	add	r22, r22
  e2:	77 1f       	adc	r23, r23
  e4:	3a 95       	dec	r19
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Dio_init+0x5e>
  e8:	9b 01       	movw	r18, r22
  ea:	29 2b       	or	r18, r25
  ec:	24 bb       	out	0x14, r18	; 20
		break;
  ee:	42 c0       	rjmp	.+132    	; 0x174 <Dio_init+0xf2>
		case Dio_Port_D:
		SET_BIT(DDRD_REG,channelPos);
  f0:	91 b3       	in	r25, 0x11	; 17
  f2:	ba 01       	movw	r22, r20
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Dio_init+0x78>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	3a 95       	dec	r19
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Dio_init+0x74>
  fe:	9b 01       	movw	r18, r22
 100:	29 2b       	or	r18, r25
 102:	21 bb       	out	0x11, r18	; 17
		break;
 104:	37 c0       	rjmp	.+110    	; 0x174 <Dio_init+0xf2>
	}
		}
		else
		{
			switch (channel_port)
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	91 f0       	breq	.+36     	; 0x12e <Dio_init+0xac>
 10a:	28 f0       	brcs	.+10     	; 0x116 <Dio_init+0x94>
 10c:	92 30       	cpi	r25, 0x02	; 2
 10e:	d9 f0       	breq	.+54     	; 0x146 <Dio_init+0xc4>
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	29 f1       	breq	.+74     	; 0x15e <Dio_init+0xdc>
 114:	2f c0       	rjmp	.+94     	; 0x174 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	ba 01       	movw	r22, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Dio_init+0x9e>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	3a 95       	dec	r19
 122:	e2 f7       	brpl	.-8      	; 0x11c <Dio_init+0x9a>
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	92 23       	and	r25, r18
 12a:	9a bb       	out	0x1a, r25	; 26
				break;
 12c:	23 c0       	rjmp	.+70     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
 12e:	27 b3       	in	r18, 0x17	; 23
 130:	ba 01       	movw	r22, r20
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_init+0xb6>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	3a 95       	dec	r19
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_init+0xb2>
 13c:	96 2f       	mov	r25, r22
 13e:	90 95       	com	r25
 140:	92 23       	and	r25, r18
 142:	97 bb       	out	0x17, r25	; 23
				break;
 144:	17 c0       	rjmp	.+46     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,channelPos);
 146:	24 b3       	in	r18, 0x14	; 20
 148:	ba 01       	movw	r22, r20
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Dio_init+0xce>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	3a 95       	dec	r19
 152:	e2 f7       	brpl	.-8      	; 0x14c <Dio_init+0xca>
 154:	96 2f       	mov	r25, r22
 156:	90 95       	com	r25
 158:	92 23       	and	r25, r18
 15a:	94 bb       	out	0x14, r25	; 20
				break;
 15c:	0b c0       	rjmp	.+22     	; 0x174 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,channelPos);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	ba 01       	movw	r22, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_init+0xe6>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	3a 95       	dec	r19
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_init+0xe2>
 16c:	96 2f       	mov	r25, r22
 16e:	90 95       	com	r25
 170:	92 23       	and	r25, r18
 172:	91 bb       	out	0x11, r25	; 17
	/*PD7*/		{Output,STD_low},
};

void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	32 96       	adiw	r30, 0x02	; 2
 178:	80 32       	cpi	r24, 0x20	; 32
 17a:	09 f0       	breq	.+2      	; 0x17e <Dio_init+0xfc>
 17c:	87 cf       	rjmp	.-242    	; 0x8c <Dio_init+0xa>
				CLR_BIT(DDRD_REG,channelPos);
				break;
			}
		  }
		}
	}
 17e:	08 95       	ret

00000180 <Dio_WriteChannel>:
		case Dio_Port_C:
		*data=GET_BIT(PINC_REG,channelPos);
		break;
		
		case Dio_Port_D:
		*data=GET_BIT(PIND_REG,channelPos);
 180:	98 2f       	mov	r25, r24
 182:	97 70       	andi	r25, 0x07	; 7
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	86 95       	lsr	r24
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	21 f1       	breq	.+72     	; 0x1d6 <Dio_WriteChannel+0x56>
 18e:	30 f0       	brcs	.+12     	; 0x19c <Dio_WriteChannel+0x1c>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	f1 f1       	breq	.+124    	; 0x210 <Dio_WriteChannel+0x90>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	09 f4       	brne	.+2      	; 0x19a <Dio_WriteChannel+0x1a>
 198:	58 c0       	rjmp	.+176    	; 0x24a <Dio_WriteChannel+0xca>
 19a:	08 95       	ret
 19c:	61 11       	cpse	r22, r1
 19e:	0e c0       	rjmp	.+28     	; 0x1bc <Dio_WriteChannel+0x3c>
 1a0:	4b b3       	in	r20, 0x1b	; 27
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Dio_WriteChannel+0x2e>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Dio_WriteChannel+0x2a>
 1b2:	cb 01       	movw	r24, r22
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	4b b3       	in	r20, 0x1b	; 27
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	b9 01       	movw	r22, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Dio_WriteChannel+0x4a>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	9a 95       	dec	r25
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Dio_WriteChannel+0x46>
 1ce:	cb 01       	movw	r24, r22
 1d0:	84 2b       	or	r24, r20
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
 1d6:	61 11       	cpse	r22, r1
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <Dio_WriteChannel+0x76>
 1da:	48 b3       	in	r20, 0x18	; 24
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_WriteChannel+0x68>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	9a 95       	dec	r25
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_WriteChannel+0x64>
 1ec:	cb 01       	movw	r24, r22
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
 1f6:	48 b3       	in	r20, 0x18	; 24
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	b9 01       	movw	r22, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Dio_WriteChannel+0x84>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	9a 95       	dec	r25
 206:	e2 f7       	brpl	.-8      	; 0x200 <Dio_WriteChannel+0x80>
 208:	cb 01       	movw	r24, r22
 20a:	84 2b       	or	r24, r20
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	08 95       	ret
 210:	61 11       	cpse	r22, r1
 212:	0e c0       	rjmp	.+28     	; 0x230 <Dio_WriteChannel+0xb0>
 214:	45 b3       	in	r20, 0x15	; 21
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <Dio_WriteChannel+0xa2>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	9a 95       	dec	r25
 224:	e2 f7       	brpl	.-8      	; 0x21e <Dio_WriteChannel+0x9e>
 226:	cb 01       	movw	r24, r22
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	85 bb       	out	0x15, r24	; 21
 22e:	08 95       	ret
 230:	45 b3       	in	r20, 0x15	; 21
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <Dio_WriteChannel+0xbe>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	9a 95       	dec	r25
 240:	e2 f7       	brpl	.-8      	; 0x23a <Dio_WriteChannel+0xba>
 242:	cb 01       	movw	r24, r22
 244:	84 2b       	or	r24, r20
 246:	85 bb       	out	0x15, r24	; 21
 248:	08 95       	ret
 24a:	61 11       	cpse	r22, r1
 24c:	0e c0       	rjmp	.+28     	; 0x26a <Dio_WriteChannel+0xea>
 24e:	42 b3       	in	r20, 0x12	; 18
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_WriteChannel+0xdc>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	9a 95       	dec	r25
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_WriteChannel+0xd8>
 260:	cb 01       	movw	r24, r22
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret
 26a:	42 b3       	in	r20, 0x12	; 18
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <Dio_WriteChannel+0xf8>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	9a 95       	dec	r25
 27a:	e2 f7       	brpl	.-8      	; 0x274 <Dio_WriteChannel+0xf4>
 27c:	cb 01       	movw	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <Dio_ReadChannel>:
}

STD_levelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
		Dio_PortType channel_port=ChannelId/8;
		Dio_ChannelType channelPos =ChannelId%8;
 284:	28 2f       	mov	r18, r24
 286:	27 70       	andi	r18, 0x07	; 7
		STD_levelType level;
		switch(channel_port){
 288:	86 95       	lsr	r24
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	79 f0       	breq	.+30     	; 0x2b0 <Dio_ReadChannel+0x2c>
 292:	28 f0       	brcs	.+10     	; 0x29e <Dio_ReadChannel+0x1a>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	a9 f0       	breq	.+42     	; 0x2c2 <Dio_ReadChannel+0x3e>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	e1 f0       	breq	.+56     	; 0x2d4 <Dio_ReadChannel+0x50>
 29c:	24 c0       	rjmp	.+72     	; 0x2e6 <Dio_ReadChannel+0x62>

			case Dio_Port_A:
			level=GET_BIT(PINA_REG,channelPos);
 29e:	89 b3       	in	r24, 0x19	; 25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Dio_ReadChannel+0x24>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Dio_ReadChannel+0x20>
 2ac:	81 70       	andi	r24, 0x01	; 1
			return level;
 2ae:	08 95       	ret
			break;

			case Dio_Port_B:
			level=GET_BIT(PINB_REG,channelPos);
 2b0:	86 b3       	in	r24, 0x16	; 22
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <Dio_ReadChannel+0x36>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	2a 95       	dec	r18
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <Dio_ReadChannel+0x32>
 2be:	81 70       	andi	r24, 0x01	; 1
			return level;
 2c0:	08 95       	ret
			break;

			case Dio_Port_C:
			level=GET_BIT(PINC_REG,channelPos);
 2c2:	83 b3       	in	r24, 0x13	; 19
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Dio_ReadChannel+0x48>
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	2a 95       	dec	r18
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <Dio_ReadChannel+0x44>
 2d0:	81 70       	andi	r24, 0x01	; 1
			return level;
 2d2:	08 95       	ret
			break;
			
			case Dio_Port_D:
			level=GET_BIT(PIND_REG,channelPos);
 2d4:	80 b3       	in	r24, 0x10	; 16
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <Dio_ReadChannel+0x5a>
 2da:	95 95       	asr	r25
 2dc:	87 95       	ror	r24
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <Dio_ReadChannel+0x56>
 2e2:	81 70       	andi	r24, 0x01	; 1
			return level;
 2e4:	08 95       	ret
			break;									
		}
}
 2e6:	08 95       	ret

000002e8 <main>:
#include "STD_Types.h"
#include "dio_cfg.h"

int main()
{
	Dio_init();
 2e8:	0e 94 41 00 	call	0x82	; 0x82 <Dio_init>
	uint8 X;
		while(1)
	{ 
		    X=Dio_ReadChannel( Dio_Channel_D0);
 2ec:	88 e1       	ldi	r24, 0x18	; 24
 2ee:	0e 94 42 01 	call	0x284	; 0x284 <Dio_ReadChannel>
		if(X==STD_high)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	29 f4       	brne	.+10     	; 0x300 <main+0x18>
		{
			Dio_WriteChannel(Dio_Channel_D6,STD_high);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	8e e1       	ldi	r24, 0x1E	; 30
 2fa:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
 2fe:	f6 cf       	rjmp	.-20     	; 0x2ec <main+0x4>
		}
		else
			Dio_WriteChannel(Dio_Channel_D6,STD_low);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
 308:	f1 cf       	rjmp	.-30     	; 0x2ec <main+0x4>

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
