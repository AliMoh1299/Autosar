
PORT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ca  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000697  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a1  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "port.h"

int main()
{
	Port_Init( Port_config );
  82:	80 e6       	ldi	r24, 0x60	; 96
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 48 00 	call	0x90	; 0x90 <Port_Init>
	while (1)
	{
		PORTD_REG=0b11100000;
  8a:	80 ee       	ldi	r24, 0xE0	; 224
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0xa>

00000090 <Port_Init>:
		 break;
	 }
}
		 
void Port_Init( const Port_ConfigType* ConfigPtr )
{
  90:	ac 01       	movw	r20, r24
  92:	21 e0       	ldi	r18, 0x01	; 1
	{
		case 0:
				DDRA_REG=OUTPUT;
		break;
		case 1:
				DDRB_REG=OUTPUT;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	01 c0       	rjmp	.+2      	; 0x9a <Port_Init+0xa>
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	92 0f       	add	r25, r18
void Port_Init( const Port_ConfigType* ConfigPtr )
{
for (uint8 i=0;i<PNUM;i++)
{

	if (ConfigPtr[i].Port_DirectionType==OUTPUT)
  9e:	fa 01       	movw	r30, r20
  a0:	e9 0f       	add	r30, r25
  a2:	f1 1d       	adc	r31, r1
  a4:	30 81       	ld	r19, Z
  a6:	3f 3f       	cpi	r19, 0xFF	; 255
  a8:	89 f4       	brne	.+34     	; 0xcc <Port_Init+0x3c>
{
	switch(i)
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	41 f0       	breq	.+16     	; 0xbe <Port_Init+0x2e>
  ae:	28 f0       	brcs	.+10     	; 0xba <Port_Init+0x2a>
  b0:	92 30       	cpi	r25, 0x02	; 2
  b2:	39 f0       	breq	.+14     	; 0xc2 <Port_Init+0x32>
  b4:	93 30       	cpi	r25, 0x03	; 3
  b6:	39 f0       	breq	.+14     	; 0xc6 <Port_Init+0x36>
  b8:	19 c0       	rjmp	.+50     	; 0xec <Port_Init+0x5c>
	{
		case 0:
				DDRA_REG=OUTPUT;
  ba:	8a bb       	out	0x1a, r24	; 26
		break;
  bc:	ed cf       	rjmp	.-38     	; 0x98 <Port_Init+0x8>
		case 1:
				DDRB_REG=OUTPUT;
  be:	87 bb       	out	0x17, r24	; 23
		break;
  c0:	eb cf       	rjmp	.-42     	; 0x98 <Port_Init+0x8>
		case 2:
				DDRC_REG=OUTPUT;		
  c2:	84 bb       	out	0x14, r24	; 20
		break;
  c4:	e9 cf       	rjmp	.-46     	; 0x98 <Port_Init+0x8>
		case 3:
				DDRD_REG=OUTPUT;		
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	81 bb       	out	0x11, r24	; 17
		break;
  ca:	08 95       	ret
	}
}
else
{
	switch(i)
  cc:	91 30       	cpi	r25, 0x01	; 1
  ce:	41 f0       	breq	.+16     	; 0xe0 <Port_Init+0x50>
  d0:	28 f0       	brcs	.+10     	; 0xdc <Port_Init+0x4c>
  d2:	92 30       	cpi	r25, 0x02	; 2
  d4:	39 f0       	breq	.+14     	; 0xe4 <Port_Init+0x54>
  d6:	93 30       	cpi	r25, 0x03	; 3
  d8:	39 f0       	breq	.+14     	; 0xe8 <Port_Init+0x58>
  da:	08 c0       	rjmp	.+16     	; 0xec <Port_Init+0x5c>
	{
		case 0:
		DDRA_REG=INPUT;
  dc:	1a ba       	out	0x1a, r1	; 26
		break;
  de:	dc cf       	rjmp	.-72     	; 0x98 <Port_Init+0x8>
		case 1:
		DDRB_REG=INPUT;
  e0:	17 ba       	out	0x17, r1	; 23
		break;
  e2:	da cf       	rjmp	.-76     	; 0x98 <Port_Init+0x8>
		case 2:
		DDRC_REG=INPUT;
  e4:	14 ba       	out	0x14, r1	; 20
		break;
  e6:	d8 cf       	rjmp	.-80     	; 0x98 <Port_Init+0x8>
		case 3:
		DDRD_REG=INPUT;
  e8:	11 ba       	out	0x11, r1	; 17
		break;	
  ea:	08 95       	ret
	 }
}
		 
void Port_Init( const Port_ConfigType* ConfigPtr )
{
for (uint8 i=0;i<PNUM;i++)
  ec:	24 30       	cpi	r18, 0x04	; 4
  ee:	a0 f2       	brcs	.-88     	; 0x98 <Port_Init+0x8>
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
