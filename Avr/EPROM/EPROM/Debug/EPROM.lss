
EPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000162d  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a9  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab2  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000793  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bab  00000000  00000000  00003b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000046d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  64:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_WritePort>:



void Dio_WritePort( Dio_PortType PortId, Dio_PortLevelType Level )
{
	switch (PortId)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	41 f0       	breq	.+16     	; 0x80 <Dio_WritePort+0x14>
  70:	28 f0       	brcs	.+10     	; 0x7c <Dio_WritePort+0x10>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	39 f0       	breq	.+14     	; 0x84 <Dio_WritePort+0x18>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	39 f0       	breq	.+14     	; 0x88 <Dio_WritePort+0x1c>
  7a:	08 95       	ret
	{
		case Dio_Port_A :
		PORTA_REG=Level;
  7c:	6b bb       	out	0x1b, r22	; 27
		break;
  7e:	08 95       	ret
		
		case Dio_Port_B :
		PORTB_REG=Level;
  80:	68 bb       	out	0x18, r22	; 24
		break;
  82:	08 95       	ret
		
		case Dio_Port_C :
		PORTC_REG=Level;
  84:	65 bb       	out	0x15, r22	; 21
		break;
  86:	08 95       	ret
		
		case Dio_Port_D :
		PORTD_REG=Level;
  88:	62 bb       	out	0x12, r22	; 18
  8a:	08 95       	ret

0000008c <Dio_WriteChannel>:
}

void Dio_WriteChannel( Dio_ChannelType ChannelId, Dio_LevelType Level )
{
			Dio_PortType channel_port=ChannelId/8;     // Determine Port A,B,C,D
			Dio_ChannelType ChannelPos =ChannelId%8;  //Determine Which Pin In Port A,B,C,D
  8c:	98 2f       	mov	r25, r24
  8e:	97 70       	andi	r25, 0x07	; 7

	
	switch(channel_port){
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f1       	breq	.+72     	; 0xe2 <Dio_WriteChannel+0x56>
  9a:	30 f0       	brcs	.+12     	; 0xa8 <Dio_WriteChannel+0x1c>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	f1 f1       	breq	.+124    	; 0x11c <Dio_WriteChannel+0x90>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <Dio_WriteChannel+0x1a>
  a4:	58 c0       	rjmp	.+176    	; 0x156 <Dio_WriteChannel+0xca>
  a6:	08 95       	ret
		case Dio_Port_A:
		if(Level == STD_low)
  a8:	61 11       	cpse	r22, r1
  aa:	0e c0       	rjmp	.+28     	; 0xc8 <Dio_WriteChannel+0x3c>
		{
			CLR_BIT(PORTA_REG,ChannelPos );
  ac:	4b b3       	in	r20, 0x1b	; 27
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	b9 01       	movw	r22, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <Dio_WriteChannel+0x2e>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	9a 95       	dec	r25
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <Dio_WriteChannel+0x2a>
  be:	cb 01       	movw	r24, r22
  c0:	80 95       	com	r24
  c2:	84 23       	and	r24, r20
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTA_REG,ChannelPos );
  c8:	4b b3       	in	r20, 0x1b	; 27
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Dio_WriteChannel+0x4a>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	9a 95       	dec	r25
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Dio_WriteChannel+0x46>
  da:	cb 01       	movw	r24, r22
  dc:	84 2b       	or	r24, r20
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret
		}
		break;
		case Dio_Port_B:
		if(Level == STD_low)
  e2:	61 11       	cpse	r22, r1
  e4:	0e c0       	rjmp	.+28     	; 0x102 <Dio_WriteChannel+0x76>
		{
			CLR_BIT(PORTB_REG,ChannelPos );
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Dio_WriteChannel+0x68>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	9a 95       	dec	r25
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Dio_WriteChannel+0x64>
  f8:	cb 01       	movw	r24, r22
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	88 bb       	out	0x18, r24	; 24
 100:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTB_REG,ChannelPos );
 102:	48 b3       	in	r20, 0x18	; 24
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	b9 01       	movw	r22, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <Dio_WriteChannel+0x84>
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	9a 95       	dec	r25
 112:	e2 f7       	brpl	.-8      	; 0x10c <Dio_WriteChannel+0x80>
 114:	cb 01       	movw	r24, r22
 116:	84 2b       	or	r24, r20
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret
		}
		break;
		case Dio_Port_C:
		if(Level == STD_low)
 11c:	61 11       	cpse	r22, r1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <Dio_WriteChannel+0xb0>
		{
			CLR_BIT(PORTC_REG,ChannelPos );
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <Dio_WriteChannel+0xa2>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <Dio_WriteChannel+0x9e>
 132:	cb 01       	movw	r24, r22
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTC_REG,ChannelPos );
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_WriteChannel+0xbe>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	9a 95       	dec	r25
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_WriteChannel+0xba>
 14e:	cb 01       	movw	r24, r22
 150:	84 2b       	or	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
		}
		break;
		case Dio_Port_D:
		if(Level == STD_low)
 156:	61 11       	cpse	r22, r1
 158:	0e c0       	rjmp	.+28     	; 0x176 <Dio_WriteChannel+0xea>
		{
			CLR_BIT(PORTD_REG,ChannelPos );
 15a:	42 b3       	in	r20, 0x12	; 18
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_WriteChannel+0xdc>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	9a 95       	dec	r25
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_WriteChannel+0xd8>
 16c:	cb 01       	movw	r24, r22
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	82 bb       	out	0x12, r24	; 18
 174:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTD_REG,ChannelPos );
 176:	42 b3       	in	r20, 0x12	; 18
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Dio_WriteChannel+0xf8>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	9a 95       	dec	r25
 186:	e2 f7       	brpl	.-8      	; 0x180 <Dio_WriteChannel+0xf4>
 188:	cb 01       	movw	r24, r22
 18a:	84 2b       	or	r24, r20
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	08 95       	ret

00000190 <Eep_Init>:
#include "EEPROM.h"


void Eep_Init( /*const Eep_ConfigType* ConfigPtr*/void )
{
	TWI_Init(FastMode,0,0,1);
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TWI_Init>
 19c:	08 95       	ret

0000019e <Eep_Write>:
}



Std_ReturnType Eep_Write( Eep_AddressType EepromAddress, const uint8* DataBufferPtr, Eep_LengthType Length )
{
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	18 2f       	mov	r17, r24
 1aa:	7b 01       	movw	r14, r22
 1ac:	ea 01       	movw	r28, r20
	    TWI_Start();
 1ae:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <TWI_Start>
	    if (TWI_GetStatus() != TW_START)
 1b2:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	19 f5       	brne	.+70     	; 0x200 <Eep_Write+0x62>
	   { return E_NOT_OK; }
	    
	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	    TWI_Write((uint8)(0xA0 | ((EepromAddress & 0x0700)>>7)));
 1ba:	80 ea       	ldi	r24, 0xA0	; 160
 1bc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
	    if (TWI_GetStatus() != TW_MT_SLA_W_ACK)
 1c0:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 1c4:	88 31       	cpi	r24, 0x18	; 24
 1c6:	f1 f4       	brne	.+60     	; 0x204 <Eep_Write+0x66>
	   { return E_NOT_OK; }
      while(Length!=0)
 1c8:	20 97       	sbiw	r28, 0x00	; 0
 1ca:	b1 f0       	breq	.+44     	; 0x1f8 <Eep_Write+0x5a>
	  {	    
	    //send the required location address
	    TWI_Write((uint8)(EepromAddress));
 1cc:	81 2f       	mov	r24, r17
 1ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
	    if (TWI_GetStatus() != TW_MT_DATA_ACK)
 1d2:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 1d6:	88 32       	cpi	r24, 0x28	; 40
 1d8:	b9 f4       	brne	.+46     	; 0x208 <Eep_Write+0x6a>
	   { return E_NOT_OK; }
	    
	    //write byte to eeprom
		
	      TWI_Write(*DataBufferPtr);
 1da:	f7 01       	movw	r30, r14
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
		  if (TWI_GetStatus() != TW_MT_DATA_ACK)
 1e2:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 1e6:	88 32       	cpi	r24, 0x28	; 40
 1e8:	89 f4       	brne	.+34     	; 0x20c <Eep_Write+0x6e>
	   { return E_NOT_OK; }

		
	
	    if (TWI_GetStatus() != TW_MT_DATA_ACK)
 1ea:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 1ee:	88 32       	cpi	r24, 0x28	; 40
 1f0:	79 f4       	brne	.+30     	; 0x210 <Eep_Write+0x72>
	   { return E_NOT_OK; }
		EepromAddress++; 
 1f2:	1f 5f       	subi	r17, 0xFF	; 255
	   Length--;
 1f4:	21 97       	sbiw	r28, 0x01	; 1
	    
	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	    TWI_Write((uint8)(0xA0 | ((EepromAddress & 0x0700)>>7)));
	    if (TWI_GetStatus() != TW_MT_SLA_W_ACK)
	   { return E_NOT_OK; }
      while(Length!=0)
 1f6:	51 f7       	brne	.-44     	; 0x1cc <Eep_Write+0x2e>
	    if (TWI_GetStatus() != TW_MT_DATA_ACK)
	   { return E_NOT_OK; }
		EepromAddress++; 
	   Length--;
	   }
	    TWI_Stop();
 1f8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <TWI_Stop>
	    
	    return E_OK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <Eep_Write+0x74>

Std_ReturnType Eep_Write( Eep_AddressType EepromAddress, const uint8* DataBufferPtr, Eep_LengthType Length )
{
	    TWI_Start();
	    if (TWI_GetStatus() != TW_START)
	   { return E_NOT_OK; }
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	07 c0       	rjmp	.+14     	; 0x212 <Eep_Write+0x74>
	    
	    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	    TWI_Write((uint8)(0xA0 | ((EepromAddress & 0x0700)>>7)));
	    if (TWI_GetStatus() != TW_MT_SLA_W_ACK)
	   { return E_NOT_OK; }
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	05 c0       	rjmp	.+10     	; 0x212 <Eep_Write+0x74>
      while(Length!=0)
	  {	    
	    //send the required location address
	    TWI_Write((uint8)(EepromAddress));
	    if (TWI_GetStatus() != TW_MT_DATA_ACK)
	   { return E_NOT_OK; }
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	03 c0       	rjmp	.+6      	; 0x212 <Eep_Write+0x74>
	    
	    //write byte to eeprom
		
	      TWI_Write(*DataBufferPtr);
		  if (TWI_GetStatus() != TW_MT_DATA_ACK)
	   { return E_NOT_OK; }
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	01 c0       	rjmp	.+2      	; 0x212 <Eep_Write+0x74>

		
	
	    if (TWI_GetStatus() != TW_MT_DATA_ACK)
	   { return E_NOT_OK; }
 210:	81 e0       	ldi	r24, 0x01	; 1
	   }
	    TWI_Stop();
	    
	    return E_OK;
	
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	08 95       	ret

0000021e <Eep_Read>:


Std_ReturnType Eep_Read( Eep_AddressType EepromAddress, uint8* DataBufferPtr, Eep_LengthType Length )
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
 226:	8b 01       	movw	r16, r22
	 TWI_Start();
 228:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <TWI_Start>
	 if (TWI_GetStatus() != TW_START)
 22c:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	39 f5       	brne	.+78     	; 0x282 <Eep_Read+0x64>
	 return E_NOT_OK;
	 
	 //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	 TWI_Write((uint8)((0xA0) | ((EepromAddress & 0x0700)>>7)));
 234:	80 ea       	ldi	r24, 0xA0	; 160
 236:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
	 if (TWI_GetStatus() != TW_MT_SLA_W_ACK)
 23a:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 23e:	88 31       	cpi	r24, 0x18	; 24
 240:	11 f5       	brne	.+68     	; 0x286 <Eep_Read+0x68>
	 return E_NOT_OK;
	 
	 //send the required location address
	 TWI_Write((uint8)(EepromAddress));
 242:	8c 2f       	mov	r24, r28
 244:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
	 if (TWI_GetStatus() != TW_MT_DATA_ACK)
 248:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 24c:	88 32       	cpi	r24, 0x28	; 40
 24e:	e9 f4       	brne	.+58     	; 0x28a <Eep_Read+0x6c>
	 return E_NOT_OK;
	 
	 //send a repeated start
	 TWI_Start();
 250:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <TWI_Start>
	 if (TWI_GetStatus() != TW_REP_START)
 254:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 258:	80 31       	cpi	r24, 0x10	; 16
 25a:	c9 f4       	brne	.+50     	; 0x28e <Eep_Read+0x70>
	 return E_NOT_OK;
	 
	 //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
	 TWI_Write((uint8)((0xA0) | ((EepromAddress & 0x0700)>>7) | 1));
 25c:	81 ea       	ldi	r24, 0xA1	; 161
 25e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <TWI_Write>
	 if (TWI_GetStatus() != TW_MT_SLA_R_ACK)
 262:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 266:	80 34       	cpi	r24, 0x40	; 64
 268:	a1 f4       	brne	.+40     	; 0x292 <Eep_Read+0x74>
	 return E_NOT_OK;
	 

	         
	 *DataBufferPtr= TWI_ReadWithNACK();
 26a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TWI_ReadWithNACK>
 26e:	f8 01       	movw	r30, r16
 270:	80 83       	st	Z, r24
	 if (TWI_GetStatus() != TW_MR_DATA_NACK)
 272:	0e 94 81 01 	call	0x302	; 0x302 <TWI_GetStatus>
 276:	88 35       	cpi	r24, 0x58	; 88
 278:	71 f4       	brne	.+28     	; 0x296 <Eep_Read+0x78>
	 return E_NOT_OK;	

	 		

	 
	 TWI_Stop();
 27a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <TWI_Stop>
	 return E_OK;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0b c0       	rjmp	.+22     	; 0x298 <Eep_Read+0x7a>

Std_ReturnType Eep_Read( Eep_AddressType EepromAddress, uint8* DataBufferPtr, Eep_LengthType Length )
{
	 TWI_Start();
	 if (TWI_GetStatus() != TW_START)
	 return E_NOT_OK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	09 c0       	rjmp	.+18     	; 0x298 <Eep_Read+0x7a>
	 
	 //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
	 TWI_Write((uint8)((0xA0) | ((EepromAddress & 0x0700)>>7)));
	 if (TWI_GetStatus() != TW_MT_SLA_W_ACK)
	 return E_NOT_OK;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	07 c0       	rjmp	.+14     	; 0x298 <Eep_Read+0x7a>
	 
	 //send the required location address
	 TWI_Write((uint8)(EepromAddress));
	 if (TWI_GetStatus() != TW_MT_DATA_ACK)
	 return E_NOT_OK;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	05 c0       	rjmp	.+10     	; 0x298 <Eep_Read+0x7a>
	 
	 //send a repeated start
	 TWI_Start();
	 if (TWI_GetStatus() != TW_REP_START)
	 return E_NOT_OK;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	03 c0       	rjmp	.+6      	; 0x298 <Eep_Read+0x7a>
	 
	 //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
	 TWI_Write((uint8)((0xA0) | ((EepromAddress & 0x0700)>>7) | 1));
	 if (TWI_GetStatus() != TW_MT_SLA_R_ACK)
	 return E_NOT_OK;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	01 c0       	rjmp	.+2      	; 0x298 <Eep_Read+0x7a>
	 

	         
	 *DataBufferPtr= TWI_ReadWithNACK();
	 if (TWI_GetStatus() != TW_MR_DATA_NACK)
	 return E_NOT_OK;	
 296:	81 e0       	ldi	r24, 0x01	; 1
	 		

	 
	 TWI_Stop();
	 return E_OK;
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <TWI_Init>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
    // Read Data
    return TWDR;
}
 2a0:	96 b7       	in	r25, 0x36	; 54
 2a2:	94 60       	ori	r25, 0x04	; 4
 2a4:	96 bf       	out	0x36, r25	; 54
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <TWI_Init+0x10>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	31 f0       	breq	.+12     	; 0x2ba <TWI_Init+0x1a>
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <TWI_Init+0x20>
 2b0:	8d e0       	ldi	r24, 0x0D	; 13
 2b2:	80 b9       	out	0x00, r24	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	81 b9       	out	0x01, r24	; 1
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <TWI_Init+0x20>
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	80 b9       	out	0x00, r24	; 0
 2be:	11 b8       	out	0x01, r1	; 1
 2c0:	22 b9       	out	0x02, r18	; 2
 2c2:	17 98       	cbi	0x02, 7	; 2
 2c4:	41 11       	cpse	r20, r1
 2c6:	10 9a       	sbi	0x02, 0	; 2
 2c8:	66 23       	and	r22, r22
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <TWI_Init+0x32>
 2cc:	86 b7       	in	r24, 0x36	; 54
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	86 bf       	out	0x36, r24	; 54
 2d2:	08 95       	ret

000002d4 <TWI_Start>:
 2d4:	84 ea       	ldi	r24, 0xA4	; 164
 2d6:	86 bf       	out	0x36, r24	; 54
 2d8:	06 b6       	in	r0, 0x36	; 54
 2da:	07 fe       	sbrs	r0, 7
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <TWI_Start+0x4>
 2de:	08 95       	ret

000002e0 <TWI_Stop>:
 2e0:	84 e9       	ldi	r24, 0x94	; 148
 2e2:	86 bf       	out	0x36, r24	; 54
 2e4:	08 95       	ret

000002e6 <TWI_Write>:
 2e6:	83 b9       	out	0x03, r24	; 3
 2e8:	84 e8       	ldi	r24, 0x84	; 132
 2ea:	86 bf       	out	0x36, r24	; 54
 2ec:	06 b6       	in	r0, 0x36	; 54
 2ee:	07 fe       	sbrs	r0, 7
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <TWI_Write+0x6>
 2f2:	08 95       	ret

000002f4 <TWI_ReadWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
 2f8:	06 b6       	in	r0, 0x36	; 54
 2fa:	07 fe       	sbrs	r0, 7
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <TWI_ReadWithNACK+0x4>
    // Read Data
    return TWDR;
 2fe:	83 b1       	in	r24, 0x03	; 3
}
 300:	08 95       	ret

00000302 <TWI_GetStatus>:

uint8 TWI_GetStatus(void)
{
    uint8 status;
    status = TWSR & 0xF8; //masking to eliminate first 3 bits 
 302:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 304:	88 7f       	andi	r24, 0xF8	; 248
 306:	08 95       	ret

00000308 <LCD_WriteCommand>:
		_delay_ms(10);
		LCD_WriteData(*String);
		_delay_ms(10);
		String++;
	}
}
 308:	cf 93       	push	r28
 30a:	c8 2f       	mov	r28, r24
 30c:	8b b3       	in	r24, 0x1b	; 27
 30e:	9c 2f       	mov	r25, r28
 310:	90 7f       	andi	r25, 0xF0	; 240
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	8b bb       	out	0x1b, r24	; 27
 318:	6b b3       	in	r22, 0x1b	; 27
 31a:	6f 70       	andi	r22, 0x0F	; 15
 31c:	69 2b       	or	r22, r25
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_WritePort>
 324:	87 b3       	in	r24, 0x17	; 23
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_WritePort>
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	89 e0       	ldi	r24, 0x09	; 9
 330:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8b e0       	ldi	r24, 0x0B	; 11
 338:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	9c e9       	ldi	r25, 0x9C	; 156
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_WriteCommand+0x38>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_WriteCommand+0x3e>
 346:	00 00       	nop
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	8b e0       	ldi	r24, 0x0B	; 11
 34c:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 350:	8f e3       	ldi	r24, 0x3F	; 63
 352:	9c e9       	ldi	r25, 0x9C	; 156
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_WriteCommand+0x4c>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_WriteCommand+0x52>
 35a:	00 00       	nop
 35c:	6b b3       	in	r22, 0x1b	; 27
 35e:	6f 70       	andi	r22, 0x0F	; 15
 360:	20 e1       	ldi	r18, 0x10	; 16
 362:	c2 9f       	mul	r28, r18
 364:	c0 01       	movw	r24, r0
 366:	11 24       	eor	r1, r1
 368:	68 2b       	or	r22, r24
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_WritePort>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8b e0       	ldi	r24, 0x0B	; 11
 374:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 378:	8f e3       	ldi	r24, 0x3F	; 63
 37a:	9c e9       	ldi	r25, 0x9C	; 156
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_WriteCommand+0x74>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_WriteCommand+0x7a>
 382:	00 00       	nop
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8b e0       	ldi	r24, 0x0B	; 11
 388:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	9c e9       	ldi	r25, 0x9C	; 156
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_WriteCommand+0x88>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_WriteCommand+0x8e>
 396:	00 00       	nop
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <LCD_int>:
 39c:	80 ef       	ldi	r24, 0xF0	; 240
 39e:	8a bb       	out	0x1a, r24	; 26
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	89 ef       	ldi	r24, 0xF9	; 249
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <LCD_int+0xe>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_int+0x18>
 3b4:	00 00       	nop
 3b6:	83 e3       	ldi	r24, 0x33	; 51
 3b8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3bc:	82 e3       	ldi	r24, 0x32	; 50
 3be:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3ce:	86 e0       	ldi	r24, 0x06	; 6
 3d0:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3da:	08 95       	ret

000003dc <LCD_Clear>:
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3e2:	8f e3       	ldi	r24, 0x3F	; 63
 3e4:	9c e9       	ldi	r25, 0x9C	; 156
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_Clear+0xa>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_Clear+0x10>
 3ec:	00 00       	nop
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 3f4:	8f e3       	ldi	r24, 0x3F	; 63
 3f6:	9c e9       	ldi	r25, 0x9C	; 156
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_Clear+0x1c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Clear+0x22>
 3fe:	00 00       	nop
 400:	08 95       	ret

00000402 <LCD_WriteData>:
 402:	cf 93       	push	r28
 404:	c8 2f       	mov	r28, r24
 406:	8b b3       	in	r24, 0x1b	; 27
 408:	9c 2f       	mov	r25, r28
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	89 2b       	or	r24, r25
 410:	8b bb       	out	0x1b, r24	; 27
 412:	6b b3       	in	r22, 0x1b	; 27
 414:	6f 70       	andi	r22, 0x0F	; 15
 416:	69 2b       	or	r22, r25
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_WritePort>
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	89 e0       	ldi	r24, 0x09	; 9
 422:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	8b e0       	ldi	r24, 0x0B	; 11
 42a:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	9c e9       	ldi	r25, 0x9C	; 156
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_WriteData+0x30>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCD_WriteData+0x36>
 438:	00 00       	nop
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8b e0       	ldi	r24, 0x0B	; 11
 43e:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 442:	8f e3       	ldi	r24, 0x3F	; 63
 444:	9c e9       	ldi	r25, 0x9C	; 156
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <LCD_WriteData+0x44>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCD_WriteData+0x4a>
 44c:	00 00       	nop
 44e:	6b b3       	in	r22, 0x1b	; 27
 450:	6f 70       	andi	r22, 0x0F	; 15
 452:	20 e1       	ldi	r18, 0x10	; 16
 454:	c2 9f       	mul	r28, r18
 456:	c0 01       	movw	r24, r0
 458:	11 24       	eor	r1, r1
 45a:	68 2b       	or	r22, r24
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_WritePort>
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 46a:	8f e3       	ldi	r24, 0x3F	; 63
 46c:	9c e9       	ldi	r25, 0x9C	; 156
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_WriteData+0x6c>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_WriteData+0x72>
 474:	00 00       	nop
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	8b e0       	ldi	r24, 0x0B	; 11
 47a:	0e 94 46 00 	call	0x8c	; 0x8c <Dio_WriteChannel>
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	9c e9       	ldi	r25, 0x9C	; 156
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_WriteData+0x80>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_WriteData+0x86>
 488:	00 00       	nop
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <LCD_GoToRowColumn>:
}

void LCD_GoToRowColumn(uint8 row, uint8 col)
{
	uint8 Address=0;
	switch(row)
 48e:	88 23       	and	r24, r24
 490:	29 f0       	breq	.+10     	; 0x49c <LCD_GoToRowColumn+0xe>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	11 f4       	brne	.+4      	; 0x49a <LCD_GoToRowColumn+0xc>
	{
		case 0:
		Address=col;
		break;
		case 1:
		Address=col+0x40;
 496:	60 5c       	subi	r22, 0xC0	; 192
		break;
 498:	01 c0       	rjmp	.+2      	; 0x49c <LCD_GoToRowColumn+0xe>
	_delay_ms(10);
}

void LCD_GoToRowColumn(uint8 row, uint8 col)
{
	uint8 Address=0;
 49a:	60 e0       	ldi	r22, 0x00	; 0
		Address=col+0x40;
		break;
		
	}
	
	LCD_WriteCommand(Address | 0x80);
 49c:	86 2f       	mov	r24, r22
 49e:	80 68       	ori	r24, 0x80	; 128
 4a0:	0e 94 84 01 	call	0x308	; 0x308 <LCD_WriteCommand>
 4a4:	08 95       	ret

000004a6 <main>:
#include "dio.h"
#include "lcd.h"
#include <util/delay.h>

int main(void)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x6>
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
	LCD_int();
 4b0:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_int>
 uint8 val = 0;
 4b4:	19 82       	std	Y+1, r1	; 0x01
 uint8 x ='m';
 4b6:	8d e6       	ldi	r24, 0x6D	; 109
 4b8:	8a 83       	std	Y+2, r24	; 0x02

	  DDRD_REG  = 0xFF;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	81 bb       	out	0x11, r24	; 17
	    Eep_Init();
 4be:	0e 94 c8 00 	call	0x190	; 0x190 <Eep_Init>
		Eep_Write(0x0000,&x,2);
 4c2:	42 e0       	ldi	r20, 0x02	; 2
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	be 01       	movw	r22, r28
 4c8:	6e 5f       	subi	r22, 0xFE	; 254
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 cf 00 	call	0x19e	; 0x19e <Eep_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d2:	8f e3       	ldi	r24, 0x3F	; 63
 4d4:	9c e9       	ldi	r25, 0x9C	; 156
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <main+0x30>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <main+0x36>
 4dc:	00 00       	nop
		_delay_ms(10);
		Eep_Read(0x0000,&val,2);
 4de:	42 e0       	ldi	r20, 0x02	; 2
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	be 01       	movw	r22, r28
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 0f 01 	call	0x21e	; 0x21e <Eep_Read>
		
	LCD_Clear();	
 4ee:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
	while(1)
	{
		LCD_GoToRowColumn(0,8);
 4f2:	68 e0       	ldi	r22, 0x08	; 8
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_GoToRowColumn>
		LCD_WriteData(val);
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WriteData>
 500:	f8 cf       	rjmp	.-16     	; 0x4f2 <main+0x4c>

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
