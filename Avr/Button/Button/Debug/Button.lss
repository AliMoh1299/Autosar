
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e58  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000535  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000641  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000632  00000000  00000000  000027a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002dd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  7a:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Button_Read>:
#include "button.h"

STD_levelType Button_Read(uint8 Button_Num)
 {
   STD_levelType Button_Level=0;
	switch(Button_Num)
  82:	89 31       	cpi	r24, 0x19	; 25
  84:	39 f0       	breq	.+14     	; 0x94 <Button_Read+0x12>
  86:	8a 31       	cpi	r24, 0x1A	; 26
  88:	49 f0       	breq	.+18     	; 0x9c <Button_Read+0x1a>
  8a:	88 31       	cpi	r24, 0x18	; 24
  8c:	59 f4       	brne	.+22     	; 0xa4 <Button_Read+0x22>
	{
	  case  Button0:
	  Button_Level=Dio_ReadChannel(Button0);
  8e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_ReadChannel>
	  break;
  92:	08 95       	ret
	
	  case Button1:	
	  Button_Level=Dio_ReadChannel(Button1);
  94:	89 e1       	ldi	r24, 0x19	; 25
  96:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_ReadChannel>
	  break;
  9a:	08 95       	ret
	  
	  case Button2:
	  Button_Level=Dio_ReadChannel(Button2);
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Dio_ReadChannel>
	  break;
  a2:	08 95       	ret
#include "button.h"

STD_levelType Button_Read(uint8 Button_Num)
 {
   STD_levelType Button_Level=0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
	  Button_Level=Dio_ReadChannel(Button2);
	  break;
    }

     return Button_Level;
  }
  a6:	08 95       	ret

000000a8 <Dio_WriteChannel>:
		case Dio_Port_C:
		*data=GET_BIT(PINC_REG,channelPos);
		break;
		
		case Dio_Port_D:
		*data=GET_BIT(PIND_REG,channelPos);
  a8:	98 2f       	mov	r25, r24
  aa:	97 70       	andi	r25, 0x07	; 7
  ac:	86 95       	lsr	r24
  ae:	86 95       	lsr	r24
  b0:	86 95       	lsr	r24
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	21 f1       	breq	.+72     	; 0xfe <Dio_WriteChannel+0x56>
  b6:	30 f0       	brcs	.+12     	; 0xc4 <Dio_WriteChannel+0x1c>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	f1 f1       	breq	.+124    	; 0x138 <Dio_WriteChannel+0x90>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	09 f4       	brne	.+2      	; 0xc2 <Dio_WriteChannel+0x1a>
  c0:	58 c0       	rjmp	.+176    	; 0x172 <Dio_WriteChannel+0xca>
  c2:	08 95       	ret
  c4:	61 11       	cpse	r22, r1
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <Dio_WriteChannel+0x3c>
  c8:	4b b3       	in	r20, 0x1b	; 27
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Dio_WriteChannel+0x2e>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	9a 95       	dec	r25
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Dio_WriteChannel+0x2a>
  da:	cb 01       	movw	r24, r22
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	08 95       	ret
  e4:	4b b3       	in	r20, 0x1b	; 27
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Dio_WriteChannel+0x4a>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	9a 95       	dec	r25
  f4:	e2 f7       	brpl	.-8      	; 0xee <Dio_WriteChannel+0x46>
  f6:	cb 01       	movw	r24, r22
  f8:	84 2b       	or	r24, r20
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	08 95       	ret
  fe:	61 11       	cpse	r22, r1
 100:	0e c0       	rjmp	.+28     	; 0x11e <Dio_WriteChannel+0x76>
 102:	48 b3       	in	r20, 0x18	; 24
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	b9 01       	movw	r22, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <Dio_WriteChannel+0x68>
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	9a 95       	dec	r25
 112:	e2 f7       	brpl	.-8      	; 0x10c <Dio_WriteChannel+0x64>
 114:	cb 01       	movw	r24, r22
 116:	80 95       	com	r24
 118:	84 23       	and	r24, r20
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	08 95       	ret
 11e:	48 b3       	in	r20, 0x18	; 24
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <Dio_WriteChannel+0x84>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	9a 95       	dec	r25
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Dio_WriteChannel+0x80>
 130:	cb 01       	movw	r24, r22
 132:	84 2b       	or	r24, r20
 134:	88 bb       	out	0x18, r24	; 24
 136:	08 95       	ret
 138:	61 11       	cpse	r22, r1
 13a:	0e c0       	rjmp	.+28     	; 0x158 <Dio_WriteChannel+0xb0>
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_WriteChannel+0xa2>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	9a 95       	dec	r25
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_WriteChannel+0x9e>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	85 bb       	out	0x15, r24	; 21
 156:	08 95       	ret
 158:	45 b3       	in	r20, 0x15	; 21
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <Dio_WriteChannel+0xbe>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	9a 95       	dec	r25
 168:	e2 f7       	brpl	.-8      	; 0x162 <Dio_WriteChannel+0xba>
 16a:	cb 01       	movw	r24, r22
 16c:	84 2b       	or	r24, r20
 16e:	85 bb       	out	0x15, r24	; 21
 170:	08 95       	ret
 172:	61 11       	cpse	r22, r1
 174:	0e c0       	rjmp	.+28     	; 0x192 <Dio_WriteChannel+0xea>
 176:	42 b3       	in	r20, 0x12	; 18
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Dio_WriteChannel+0xdc>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	9a 95       	dec	r25
 186:	e2 f7       	brpl	.-8      	; 0x180 <Dio_WriteChannel+0xd8>
 188:	cb 01       	movw	r24, r22
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	82 bb       	out	0x12, r24	; 18
 190:	08 95       	ret
 192:	42 b3       	in	r20, 0x12	; 18
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Dio_WriteChannel+0xf8>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <Dio_WriteChannel+0xf4>
 1a4:	cb 01       	movw	r24, r22
 1a6:	84 2b       	or	r24, r20
 1a8:	82 bb       	out	0x12, r24	; 18
 1aa:	08 95       	ret

000001ac <Dio_ReadChannel>:
}

STD_levelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
		Dio_PortType channel_port=ChannelId/8;
		Dio_ChannelType channelPos =ChannelId%8;
 1ac:	28 2f       	mov	r18, r24
 1ae:	27 70       	andi	r18, 0x07	; 7
		STD_levelType level;
		switch(channel_port){
 1b0:	86 95       	lsr	r24
 1b2:	86 95       	lsr	r24
 1b4:	86 95       	lsr	r24
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	79 f0       	breq	.+30     	; 0x1d8 <Dio_ReadChannel+0x2c>
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <Dio_ReadChannel+0x1a>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	a9 f0       	breq	.+42     	; 0x1ea <Dio_ReadChannel+0x3e>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	e1 f0       	breq	.+56     	; 0x1fc <Dio_ReadChannel+0x50>
 1c4:	24 c0       	rjmp	.+72     	; 0x20e <Dio_ReadChannel+0x62>

			case Dio_Port_A:
			level=GET_BIT(PINA_REG,channelPos);
 1c6:	89 b3       	in	r24, 0x19	; 25
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Dio_ReadChannel+0x24>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	2a 95       	dec	r18
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Dio_ReadChannel+0x20>
 1d4:	81 70       	andi	r24, 0x01	; 1
			return level;
 1d6:	08 95       	ret
			break;

			case Dio_Port_B:
			level=GET_BIT(PINB_REG,channelPos);
 1d8:	86 b3       	in	r24, 0x16	; 22
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <Dio_ReadChannel+0x36>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	2a 95       	dec	r18
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <Dio_ReadChannel+0x32>
 1e6:	81 70       	andi	r24, 0x01	; 1
			return level;
 1e8:	08 95       	ret
			break;

			case Dio_Port_C:
			level=GET_BIT(PINC_REG,channelPos);
 1ea:	83 b3       	in	r24, 0x13	; 19
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_ReadChannel+0x48>
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	2a 95       	dec	r18
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_ReadChannel+0x44>
 1f8:	81 70       	andi	r24, 0x01	; 1
			return level;
 1fa:	08 95       	ret
			break;
			
			case Dio_Port_D:
			level=GET_BIT(PIND_REG,channelPos);
 1fc:	80 b3       	in	r24, 0x10	; 16
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <Dio_ReadChannel+0x5a>
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	2a 95       	dec	r18
 208:	e2 f7       	brpl	.-8      	; 0x202 <Dio_ReadChannel+0x56>
 20a:	81 70       	andi	r24, 0x01	; 1
			return level;
 20c:	08 95       	ret
			break;									
		}
}
 20e:	08 95       	ret

00000210 <Dio_init>:
	/*PD6*/		{Output,STD_low},
	/*PD7*/		{Output,STD_low},
};

void Dio_init()
{
 210:	e0 e6       	ldi	r30, 0x60	; 96
 212:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
 214:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	50 e0       	ldi	r21, 0x00	; 0
void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
	{
		
	  Dio_PortType channel_port=i/8;
 21a:	98 2f       	mov	r25, r24
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
   	  Dio_ChannelType channelPos=i%8;		
 222:	38 2f       	mov	r19, r24
 224:	37 70       	andi	r19, 0x07	; 7
	if(Dio_pin_config[i].pinDirection ==Output)
 226:	20 81       	ld	r18, Z
 228:	21 30       	cpi	r18, 0x01	; 1
 22a:	a1 f5       	brne	.+104    	; 0x294 <Dio_init+0x84>
	{
		switch(channel_port)
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	89 f0       	breq	.+34     	; 0x252 <Dio_init+0x42>
 230:	28 f0       	brcs	.+10     	; 0x23c <Dio_init+0x2c>
 232:	92 30       	cpi	r25, 0x02	; 2
 234:	c9 f0       	breq	.+50     	; 0x268 <Dio_init+0x58>
 236:	93 30       	cpi	r25, 0x03	; 3
 238:	11 f1       	breq	.+68     	; 0x27e <Dio_init+0x6e>
 23a:	63 c0       	rjmp	.+198    	; 0x302 <Dio_init+0xf2>
	{
		case Dio_Port_A:
		SET_BIT(DDRA_REG,channelPos);
 23c:	9a b3       	in	r25, 0x1a	; 26
 23e:	ba 01       	movw	r22, r20
 240:	02 c0       	rjmp	.+4      	; 0x246 <Dio_init+0x36>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	3a 95       	dec	r19
 248:	e2 f7       	brpl	.-8      	; 0x242 <Dio_init+0x32>
 24a:	9b 01       	movw	r18, r22
 24c:	29 2b       	or	r18, r25
 24e:	2a bb       	out	0x1a, r18	; 26
		break;
 250:	58 c0       	rjmp	.+176    	; 0x302 <Dio_init+0xf2>
		case Dio_Port_B:
		SET_BIT(DDRB_REG,channelPos);
 252:	97 b3       	in	r25, 0x17	; 23
 254:	ba 01       	movw	r22, r20
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_init+0x4c>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	3a 95       	dec	r19
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_init+0x48>
 260:	9b 01       	movw	r18, r22
 262:	29 2b       	or	r18, r25
 264:	27 bb       	out	0x17, r18	; 23
		break;
 266:	4d c0       	rjmp	.+154    	; 0x302 <Dio_init+0xf2>
		case Dio_Port_C:
		SET_BIT(DDRC_REG,channelPos);
 268:	94 b3       	in	r25, 0x14	; 20
 26a:	ba 01       	movw	r22, r20
 26c:	02 c0       	rjmp	.+4      	; 0x272 <Dio_init+0x62>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	3a 95       	dec	r19
 274:	e2 f7       	brpl	.-8      	; 0x26e <Dio_init+0x5e>
 276:	9b 01       	movw	r18, r22
 278:	29 2b       	or	r18, r25
 27a:	24 bb       	out	0x14, r18	; 20
		break;
 27c:	42 c0       	rjmp	.+132    	; 0x302 <Dio_init+0xf2>
		case Dio_Port_D:
		SET_BIT(DDRD_REG,channelPos);
 27e:	91 b3       	in	r25, 0x11	; 17
 280:	ba 01       	movw	r22, r20
 282:	02 c0       	rjmp	.+4      	; 0x288 <Dio_init+0x78>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	3a 95       	dec	r19
 28a:	e2 f7       	brpl	.-8      	; 0x284 <Dio_init+0x74>
 28c:	9b 01       	movw	r18, r22
 28e:	29 2b       	or	r18, r25
 290:	21 bb       	out	0x11, r18	; 17
		break;
 292:	37 c0       	rjmp	.+110    	; 0x302 <Dio_init+0xf2>
	}
		}
		else
		{
			switch (channel_port)
 294:	91 30       	cpi	r25, 0x01	; 1
 296:	91 f0       	breq	.+36     	; 0x2bc <Dio_init+0xac>
 298:	28 f0       	brcs	.+10     	; 0x2a4 <Dio_init+0x94>
 29a:	92 30       	cpi	r25, 0x02	; 2
 29c:	d9 f0       	breq	.+54     	; 0x2d4 <Dio_init+0xc4>
 29e:	93 30       	cpi	r25, 0x03	; 3
 2a0:	29 f1       	breq	.+74     	; 0x2ec <Dio_init+0xdc>
 2a2:	2f c0       	rjmp	.+94     	; 0x302 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,channelPos);
 2a4:	2a b3       	in	r18, 0x1a	; 26
 2a6:	ba 01       	movw	r22, r20
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_init+0x9e>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	3a 95       	dec	r19
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_init+0x9a>
 2b2:	96 2f       	mov	r25, r22
 2b4:	90 95       	com	r25
 2b6:	92 23       	and	r25, r18
 2b8:	9a bb       	out	0x1a, r25	; 26
				break;
 2ba:	23 c0       	rjmp	.+70     	; 0x302 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,channelPos);
 2bc:	27 b3       	in	r18, 0x17	; 23
 2be:	ba 01       	movw	r22, r20
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Dio_init+0xb6>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	3a 95       	dec	r19
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Dio_init+0xb2>
 2ca:	96 2f       	mov	r25, r22
 2cc:	90 95       	com	r25
 2ce:	92 23       	and	r25, r18
 2d0:	97 bb       	out	0x17, r25	; 23
				break;
 2d2:	17 c0       	rjmp	.+46     	; 0x302 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,channelPos);
 2d4:	24 b3       	in	r18, 0x14	; 20
 2d6:	ba 01       	movw	r22, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <Dio_init+0xce>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	3a 95       	dec	r19
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <Dio_init+0xca>
 2e2:	96 2f       	mov	r25, r22
 2e4:	90 95       	com	r25
 2e6:	92 23       	and	r25, r18
 2e8:	94 bb       	out	0x14, r25	; 20
				break;
 2ea:	0b c0       	rjmp	.+22     	; 0x302 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,channelPos);
 2ec:	21 b3       	in	r18, 0x11	; 17
 2ee:	ba 01       	movw	r22, r20
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Dio_init+0xe6>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	3a 95       	dec	r19
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <Dio_init+0xe2>
 2fa:	96 2f       	mov	r25, r22
 2fc:	90 95       	com	r25
 2fe:	92 23       	and	r25, r18
 300:	91 bb       	out	0x11, r25	; 17
	/*PD7*/		{Output,STD_low},
};

void Dio_init()
{
	for (uint8 i =Dio_Channel_A0;i<PINNUM;i++)
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	32 96       	adiw	r30, 0x02	; 2
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	09 f0       	breq	.+2      	; 0x30c <Dio_init+0xfc>
 30a:	87 cf       	rjmp	.-242    	; 0x21a <Dio_init+0xa>
				CLR_BIT(DDRD_REG,channelPos);
				break;
			}
		  }
		}
	}
 30c:	08 95       	ret

0000030e <main>:
#include "button.h"

int main()
{  
	STD_levelType x,y,z ;
	Dio_init();
 30e:	0e 94 08 01 	call	0x210	; 0x210 <Dio_init>
	while(1)
	{
		x=Button_Read(Button0);
 312:	88 e1       	ldi	r24, 0x18	; 24
 314:	0e 94 41 00 	call	0x82	; 0x82 <Button_Read>
			Dio_WriteChannel(Dio_Channel_D5,x);
 318:	68 2f       	mov	r22, r24
 31a:	8d e1       	ldi	r24, 0x1D	; 29
 31c:	0e 94 54 00 	call	0xa8	; 0xa8 <Dio_WriteChannel>
		y=Button_Read(Button1);
 320:	89 e1       	ldi	r24, 0x19	; 25
 322:	0e 94 41 00 	call	0x82	; 0x82 <Button_Read>
			Dio_WriteChannel(Dio_Channel_D6,y);
 326:	68 2f       	mov	r22, r24
 328:	8e e1       	ldi	r24, 0x1E	; 30
 32a:	0e 94 54 00 	call	0xa8	; 0xa8 <Dio_WriteChannel>
		z=Button_Read(Button2);
 32e:	8a e1       	ldi	r24, 0x1A	; 26
 330:	0e 94 41 00 	call	0x82	; 0x82 <Button_Read>
			Dio_WriteChannel(Dio_Channel_D7,z);
 334:	68 2f       	mov	r22, r24
 336:	8f e1       	ldi	r24, 0x1F	; 31
 338:	0e 94 54 00 	call	0xa8	; 0xa8 <Dio_WriteChannel>
 33c:	ea cf       	rjmp	.-44     	; 0x312 <main+0x4>

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
