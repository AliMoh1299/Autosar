
External_EEPROM_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000f38  00000fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000260  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f83  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e7  00000000  00000000  00004a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000603c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  0000627c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  00006743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000005e1  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000779d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  7a:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <EEPROM_Init>:
 *  Author: Mohamed Tarek
 */ 
#include "External_EEPROM.h"

void EEPROM_Init(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just initialize the TWI module inside the MC
  8a:	0e 94 91 01 	call	0x322	; 0x322 <TWI_Init>
}
  8e:	cf 91       	pop	r28
  90:	df 91       	pop	r29
  92:	08 95       	ret

00000094 <EEPROM_Write_Byte>:

uint8 EEPROM_Write_Byte(uint16 u16addr, uint8 u8data)
{
  94:	df 93       	push	r29
  96:	cf 93       	push	r28
  98:	00 d0       	rcall	.+0      	; 0x9a <EEPROM_Write_Byte+0x6>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
  a6:	0e 94 ab 01 	call	0x356	; 0x356 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
  aa:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	11 f0       	breq	.+4      	; 0xb6 <EEPROM_Write_Byte+0x22>
        return ERROR;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	27 c0       	rjmp	.+78     	; 0x104 <EEPROM_Write_Byte+0x70>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	80 70       	andi	r24, 0x00	; 0
  bc:	97 70       	andi	r25, 0x07	; 7
  be:	88 0f       	add	r24, r24
  c0:	89 2f       	mov	r24, r25
  c2:	88 1f       	adc	r24, r24
  c4:	99 0b       	sbc	r25, r25
  c6:	91 95       	neg	r25
  c8:	80 6a       	ori	r24, 0xA0	; 160
  ca:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
  ce:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
  d2:	88 31       	cpi	r24, 0x18	; 24
  d4:	11 f0       	breq	.+4      	; 0xda <EEPROM_Write_Byte+0x46>
        return ERROR; 
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	15 c0       	rjmp	.+42     	; 0x104 <EEPROM_Write_Byte+0x70>
		 
    //send the required location address
    TWI_Write((uint8)(u16addr));
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
  e0:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
  e4:	88 32       	cpi	r24, 0x28	; 40
  e6:	11 f0       	breq	.+4      	; 0xec <EEPROM_Write_Byte+0x58>
        return ERROR;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0c c0       	rjmp	.+24     	; 0x104 <EEPROM_Write_Byte+0x70>
		
    //write byte to eeprom
    TWI_Write(u8data);
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
  f2:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
  f6:	88 32       	cpi	r24, 0x28	; 40
  f8:	11 f0       	breq	.+4      	; 0xfe <EEPROM_Write_Byte+0x6a>
        return ERROR;
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <EEPROM_Write_Byte+0x70>
		
    TWI_Stop();
  fe:	0e 94 be 01 	call	0x37c	; 0x37c <TWI_Stop>
	
    return SUCCESS;
 102:	81 e0       	ldi	r24, 0x01	; 1
}
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <EEPROM_Read_Byte>:

uint8 EEPROM_Read_Byte(uint16 u16addr, uint8 *u8data)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	00 d0       	rcall	.+0      	; 0x116 <EEPROM_Read_Byte+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <EEPROM_Read_Byte+0x8>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7c 83       	std	Y+4, r23	; 0x04
 122:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
 124:	0e 94 ab 01 	call	0x356	; 0x356 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
 128:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	11 f0       	breq	.+4      	; 0x134 <EEPROM_Read_Byte+0x24>
        return ERROR;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	45 c0       	rjmp	.+138    	; 0x1be <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	80 70       	andi	r24, 0x00	; 0
 13a:	97 70       	andi	r25, 0x07	; 7
 13c:	88 0f       	add	r24, r24
 13e:	89 2f       	mov	r24, r25
 140:	88 1f       	adc	r24, r24
 142:	99 0b       	sbc	r25, r25
 144:	91 95       	neg	r25
 146:	80 6a       	ori	r24, 0xA0	; 160
 148:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
 14c:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 150:	88 31       	cpi	r24, 0x18	; 24
 152:	11 f0       	breq	.+4      	; 0x158 <EEPROM_Read_Byte+0x48>
        return ERROR;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	33 c0       	rjmp	.+102    	; 0x1be <EEPROM_Read_Byte+0xae>
		
    //send the required location address
    TWI_Write((uint8)(u16addr));
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
 15e:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 162:	88 32       	cpi	r24, 0x28	; 40
 164:	11 f0       	breq	.+4      	; 0x16a <EEPROM_Read_Byte+0x5a>
        return ERROR;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	2a c0       	rjmp	.+84     	; 0x1be <EEPROM_Read_Byte+0xae>
		
    //send a repeated start
    TWI_Start();
 16a:	0e 94 ab 01 	call	0x356	; 0x356 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
 16e:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 172:	80 31       	cpi	r24, 0x10	; 16
 174:	11 f0       	breq	.+4      	; 0x17a <EEPROM_Read_Byte+0x6a>
        return ERROR;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	22 c0       	rjmp	.+68     	; 0x1be <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	9a 81       	ldd	r25, Y+2	; 0x02
 17e:	80 70       	andi	r24, 0x00	; 0
 180:	97 70       	andi	r25, 0x07	; 7
 182:	88 0f       	add	r24, r24
 184:	89 2f       	mov	r24, r25
 186:	88 1f       	adc	r24, r24
 188:	99 0b       	sbc	r25, r25
 18a:	91 95       	neg	r25
 18c:	81 6a       	ori	r24, 0xA1	; 161
 18e:	0e 94 ca 01 	call	0x394	; 0x394 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
 192:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 196:	80 34       	cpi	r24, 0x40	; 64
 198:	11 f0       	breq	.+4      	; 0x19e <EEPROM_Read_Byte+0x8e>
        return ERROR;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	10 c0       	rjmp	.+32     	; 0x1be <EEPROM_Read_Byte+0xae>
		
    *u8data = TWI_Read_With_NACK();
 19e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TWI_Read_With_NACK>
 1a2:	28 2f       	mov	r18, r24
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
 1ac:	0e 94 13 02 	call	0x426	; 0x426 <TWI_Get_Status>
 1b0:	88 35       	cpi	r24, 0x58	; 88
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <EEPROM_Read_Byte+0xa8>
        return ERROR;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <EEPROM_Read_Byte+0xae>
		
    TWI_Stop();
 1b8:	0e 94 be 01 	call	0x37c	; 0x37c <TWI_Stop>
    return SUCCESS;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <main>:
 

#include"External_EEPROM.h"

int main(void)
{
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	2f 97       	sbiw	r28, 0x0f	; 15
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	uint8 val = 0;
 1e4:	1f 86       	std	Y+15, r1	; 0x0f
	
	DDRD  = 0xFF;
 1e6:	81 e3       	ldi	r24, 0x31	; 49
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
	PORTD = 0x00;
 1f0:	82 e3       	ldi	r24, 0x32	; 50
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	10 82       	st	Z, r1

	// Init EEPROM
	EEPROM_Init();
 1f8:	0e 94 41 00 	call	0x82	; 0x82 <EEPROM_Init>

	EEPROM_Write_Byte(0x0311, 0x0F); // Write 0xFF in the external EEPROM
 1fc:	81 e1       	ldi	r24, 0x11	; 17
 1fe:	93 e0       	ldi	r25, 0x03	; 3
 200:	6f e0       	ldi	r22, 0x0F	; 15
 202:	0e 94 4a 00 	call	0x94	; 0x94 <EEPROM_Write_Byte>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	a0 e2       	ldi	r26, 0x20	; 32
 20c:	b1 e4       	ldi	r27, 0x41	; 65
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	ab 83       	std	Y+3, r26	; 0x03
 214:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 216:	69 81       	ldd	r22, Y+1	; 0x01
 218:	7a 81       	ldd	r23, Y+2	; 0x02
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	9c 81       	ldd	r25, Y+4	; 0x04
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	4a ef       	ldi	r20, 0xFA	; 250
 224:	54 e4       	ldi	r21, 0x44	; 68
 226:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__mulsf3>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	8d 83       	std	Y+5, r24	; 0x05
 230:	9e 83       	std	Y+6, r25	; 0x06
 232:	af 83       	std	Y+7, r26	; 0x07
 234:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	6d 81       	ldd	r22, Y+5	; 0x05
 23a:	7e 81       	ldd	r23, Y+6	; 0x06
 23c:	8f 81       	ldd	r24, Y+7	; 0x07
 23e:	98 85       	ldd	r25, Y+8	; 0x08
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__ltsf2>
 24c:	88 23       	and	r24, r24
 24e:	0c f0       	brlt	.+2      	; 0x252 <main+0x86>
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	11 23       	and	r17, r17
 254:	29 f0       	breq	.+10     	; 0x260 <main+0x94>
		__ticks = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9a 87       	std	Y+10, r25	; 0x0a
 25c:	89 87       	std	Y+9, r24	; 0x09
 25e:	46 c0       	rjmp	.+140    	; 0x2ec <main+0x120>
	else if (__tmp > 65535)
 260:	11 e0       	ldi	r17, 0x01	; 1
 262:	6d 81       	ldd	r22, Y+5	; 0x05
 264:	7e 81       	ldd	r23, Y+6	; 0x06
 266:	8f 81       	ldd	r24, Y+7	; 0x07
 268:	98 85       	ldd	r25, Y+8	; 0x08
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	3f ef       	ldi	r19, 0xFF	; 255
 26e:	4f e7       	ldi	r20, 0x7F	; 127
 270:	57 e4       	ldi	r21, 0x47	; 71
 272:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__gtsf2>
 276:	18 16       	cp	r1, r24
 278:	0c f0       	brlt	.+2      	; 0x27c <main+0xb0>
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	11 23       	and	r17, r17
 27e:	61 f1       	breq	.+88     	; 0x2d8 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 280:	69 81       	ldd	r22, Y+1	; 0x01
 282:	7a 81       	ldd	r23, Y+2	; 0x02
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	9c 81       	ldd	r25, Y+4	; 0x04
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e2       	ldi	r20, 0x20	; 32
 28e:	51 e4       	ldi	r21, 0x41	; 65
 290:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__mulsf3>
 294:	dc 01       	movw	r26, r24
 296:	cb 01       	movw	r24, r22
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	0e 94 23 02 	call	0x446	; 0x446 <__fixunssfsi>
 2a0:	dc 01       	movw	r26, r24
 2a2:	cb 01       	movw	r24, r22
 2a4:	9a 87       	std	Y+10, r25	; 0x0a
 2a6:	89 87       	std	Y+9, r24	; 0x09
 2a8:	12 c0       	rjmp	.+36     	; 0x2ce <main+0x102>
 2aa:	88 ec       	ldi	r24, 0xC8	; 200
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9c 87       	std	Y+12, r25	; 0x0c
 2b0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b6:	8c 01       	movw	r16, r24
 2b8:	c8 01       	movw	r24, r16
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0xee>
 2be:	8c 01       	movw	r16, r24
 2c0:	1c 87       	std	Y+12, r17	; 0x0c
 2c2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c4:	89 85       	ldd	r24, Y+9	; 0x09
 2c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	9a 87       	std	Y+10, r25	; 0x0a
 2cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ce:	89 85       	ldd	r24, Y+9	; 0x09
 2d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	51 f7       	brne	.-44     	; 0x2aa <main+0xde>
 2d6:	17 c0       	rjmp	.+46     	; 0x306 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2d8:	6d 81       	ldd	r22, Y+5	; 0x05
 2da:	7e 81       	ldd	r23, Y+6	; 0x06
 2dc:	8f 81       	ldd	r24, Y+7	; 0x07
 2de:	98 85       	ldd	r25, Y+8	; 0x08
 2e0:	0e 94 23 02 	call	0x446	; 0x446 <__fixunssfsi>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	9a 87       	std	Y+10, r25	; 0x0a
 2ea:	89 87       	std	Y+9, r24	; 0x09
 2ec:	89 85       	ldd	r24, Y+9	; 0x09
 2ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f0:	9e 87       	std	Y+14, r25	; 0x0e
 2f2:	8d 87       	std	Y+13, r24	; 0x0d
 2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f8:	8c 01       	movw	r16, r24
 2fa:	f8 01       	movw	r30, r16
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x130>
 300:	8f 01       	movw	r16, r30
 302:	1e 87       	std	Y+14, r17	; 0x0e
 304:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	EEPROM_Read_Byte(0x0311, &val); // Read 0xFF from the external EEPROM
 306:	9e 01       	movw	r18, r28
 308:	21 5f       	subi	r18, 0xF1	; 241
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	81 e1       	ldi	r24, 0x11	; 17
 30e:	93 e0       	ldi	r25, 0x03	; 3
 310:	b9 01       	movw	r22, r18
 312:	0e 94 88 00 	call	0x110	; 0x110 <EEPROM_Read_Byte>
	while(1)
	{
		PORTD = val; // out the read value from the external EEPROM
 316:	82 e3       	ldi	r24, 0x32	; 50
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2f 85       	ldd	r18, Y+15	; 0x0f
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	}
 320:	fa cf       	rjmp	.-12     	; 0x316 <main+0x14a>

00000322 <TWI_Init>:
 *  Author: Mohamed Tarek
 */ 
#include "I2C.h"

void TWI_Init(void)
{
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
    // Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz
    TWBR = 0x02;
 32a:	80 e2       	ldi	r24, 0x20	; 32
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	22 e0       	ldi	r18, 0x02	; 2
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
	TWSR = 0x00;
 334:	81 e2       	ldi	r24, 0x21	; 33
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	10 82       	st	Z, r1
	
    // Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
    // General Call Recognition: Off
    TWAR = 0b00000010; // my address = 0x01 :) 
 33c:	82 e2       	ldi	r24, 0x22	; 34
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	22 e0       	ldi	r18, 0x02	; 2
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
	
    TWCR = (1<<TWEN); //enable TWI
 346:	86 e5       	ldi	r24, 0x56	; 86
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	24 e0       	ldi	r18, 0x04	; 4
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
}
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret

00000356 <TWI_Start>:

void TWI_Start(void)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 35e:	86 e5       	ldi	r24, 0x56	; 86
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	24 ea       	ldi	r18, 0xA4	; 164
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
 368:	00 00       	nop
 36a:	86 e5       	ldi	r24, 0x56	; 86
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	d4 f7       	brge	.-12     	; 0x36a <TWI_Start+0x14>
}
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	08 95       	ret

0000037c <TWI_Stop>:

void TWI_Stop(void)
{
 37c:	df 93       	push	r29
 37e:	cf 93       	push	r28
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 384:	86 e5       	ldi	r24, 0x56	; 86
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	24 e9       	ldi	r18, 0x94	; 148
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <TWI_Write>:

void TWI_Write(uint8 data)
{
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	0f 92       	push	r0
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	89 83       	std	Y+1, r24	; 0x01
    // Put data On TWI data Register
    TWDR = data;
 3a0:	83 e2       	ldi	r24, 0x23	; 35
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	29 81       	ldd	r18, Y+1	; 0x01
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 3aa:	86 e5       	ldi	r24, 0x56	; 86
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	24 e8       	ldi	r18, 0x84	; 132
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
 3b4:	00 00       	nop
 3b6:	86 e5       	ldi	r24, 0x56	; 86
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	fc 01       	movw	r30, r24
 3bc:	80 81       	ld	r24, Z
 3be:	88 23       	and	r24, r24
 3c0:	d4 f7       	brge	.-12     	; 0x3b6 <TWI_Write+0x22>
}
 3c2:	0f 90       	pop	r0
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	08 95       	ret

000003ca <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 3d2:	86 e5       	ldi	r24, 0x56	; 86
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	24 ec       	ldi	r18, 0xC4	; 196
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
 3dc:	00 00       	nop
 3de:	86 e5       	ldi	r24, 0x56	; 86
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	88 23       	and	r24, r24
 3e8:	d4 f7       	brge	.-12     	; 0x3de <TWI_Read_With_ACK+0x14>
    // Read Data
    return TWDR;
 3ea:	83 e2       	ldi	r24, 0x23	; 35
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	fc 01       	movw	r30, r24
 3f0:	80 81       	ld	r24, Z
}
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 400:	86 e5       	ldi	r24, 0x56	; 86
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	24 e8       	ldi	r18, 0x84	; 132
 406:	fc 01       	movw	r30, r24
 408:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while(BIT_IS_CLEAR(TWCR,TWINT));
 40a:	00 00       	nop
 40c:	86 e5       	ldi	r24, 0x56	; 86
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	88 23       	and	r24, r24
 416:	d4 f7       	brge	.-12     	; 0x40c <TWI_Read_With_NACK+0x14>
    // Read Data
    return TWDR;
 418:	83 e2       	ldi	r24, 0x23	; 35
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	fc 01       	movw	r30, r24
 41e:	80 81       	ld	r24, Z
}
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	0f 92       	push	r0
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    status = TWSR & 0xF8; //masking to eliminate first 3 bits 
 430:	81 e2       	ldi	r24, 0x21	; 33
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	80 81       	ld	r24, Z
 438:	88 7f       	andi	r24, 0xF8	; 248
 43a:	89 83       	std	Y+1, r24	; 0x01
    return status;
 43c:	89 81       	ldd	r24, Y+1	; 0x01
}
 43e:	0f 90       	pop	r0
 440:	cf 91       	pop	r28
 442:	df 91       	pop	r29
 444:	08 95       	ret

00000446 <__fixunssfsi>:
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	7b 01       	movw	r14, r22
 450:	8c 01       	movw	r16, r24
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	5f e4       	ldi	r21, 0x4F	; 79
 45a:	0e 94 21 05 	call	0xa42	; 0xa42 <__gesf2>
 45e:	87 fd       	sbrc	r24, 7
 460:	11 c0       	rjmp	.+34     	; 0x484 <__stack+0x25>
 462:	c8 01       	movw	r24, r16
 464:	b7 01       	movw	r22, r14
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	5f e4       	ldi	r21, 0x4F	; 79
 46e:	0e 94 c6 03 	call	0x78c	; 0x78c <__subsf3>
 472:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixsfsi>
 476:	9b 01       	movw	r18, r22
 478:	ac 01       	movw	r20, r24
 47a:	20 50       	subi	r18, 0x00	; 0
 47c:	30 40       	sbci	r19, 0x00	; 0
 47e:	40 40       	sbci	r20, 0x00	; 0
 480:	50 48       	sbci	r21, 0x80	; 128
 482:	06 c0       	rjmp	.+12     	; 0x490 <__stack+0x31>
 484:	c8 01       	movw	r24, r16
 486:	b7 01       	movw	r22, r14
 488:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixsfsi>
 48c:	9b 01       	movw	r18, r22
 48e:	ac 01       	movw	r20, r24
 490:	b9 01       	movw	r22, r18
 492:	ca 01       	movw	r24, r20
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	08 95       	ret

0000049e <_fpadd_parts>:
 49e:	a0 e0       	ldi	r26, 0x00	; 0
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e5       	ldi	r30, 0x55	; 85
 4a4:	f2 e0       	ldi	r31, 0x02	; 2
 4a6:	0c 94 67 07 	jmp	0xece	; 0xece <__prologue_saves__+0x8>
 4aa:	fc 01       	movw	r30, r24
 4ac:	ea 01       	movw	r28, r20
 4ae:	80 81       	ld	r24, Z
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	08 f4       	brcc	.+2      	; 0x4b6 <_fpadd_parts+0x18>
 4b4:	38 c1       	rjmp	.+624    	; 0x726 <_fpadd_parts+0x288>
 4b6:	db 01       	movw	r26, r22
 4b8:	9c 91       	ld	r25, X
 4ba:	92 30       	cpi	r25, 0x02	; 2
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <_fpadd_parts+0x22>
 4be:	30 c1       	rjmp	.+608    	; 0x720 <_fpadd_parts+0x282>
 4c0:	84 30       	cpi	r24, 0x04	; 4
 4c2:	59 f4       	brne	.+22     	; 0x4da <_fpadd_parts+0x3c>
 4c4:	94 30       	cpi	r25, 0x04	; 4
 4c6:	09 f0       	breq	.+2      	; 0x4ca <_fpadd_parts+0x2c>
 4c8:	2e c1       	rjmp	.+604    	; 0x726 <_fpadd_parts+0x288>
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	8c 91       	ld	r24, X
 4d0:	11 97       	sbiw	r26, 0x01	; 1
 4d2:	98 17       	cp	r25, r24
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <_fpadd_parts+0x3a>
 4d6:	21 c1       	rjmp	.+578    	; 0x71a <_fpadd_parts+0x27c>
 4d8:	26 c1       	rjmp	.+588    	; 0x726 <_fpadd_parts+0x288>
 4da:	94 30       	cpi	r25, 0x04	; 4
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <_fpadd_parts+0x42>
 4de:	20 c1       	rjmp	.+576    	; 0x720 <_fpadd_parts+0x282>
 4e0:	92 30       	cpi	r25, 0x02	; 2
 4e2:	b1 f4       	brne	.+44     	; 0x510 <_fpadd_parts+0x72>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	09 f0       	breq	.+2      	; 0x4ea <_fpadd_parts+0x4c>
 4e8:	1e c1       	rjmp	.+572    	; 0x726 <_fpadd_parts+0x288>
 4ea:	ca 01       	movw	r24, r20
 4ec:	af 01       	movw	r20, r30
 4ee:	28 e0       	ldi	r18, 0x08	; 8
 4f0:	da 01       	movw	r26, r20
 4f2:	0d 90       	ld	r0, X+
 4f4:	ad 01       	movw	r20, r26
 4f6:	dc 01       	movw	r26, r24
 4f8:	0d 92       	st	X+, r0
 4fa:	cd 01       	movw	r24, r26
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	c1 f7       	brne	.-16     	; 0x4f0 <_fpadd_parts+0x52>
 500:	db 01       	movw	r26, r22
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	8c 91       	ld	r24, X
 506:	11 97       	sbiw	r26, 0x01	; 1
 508:	91 81       	ldd	r25, Z+1	; 0x01
 50a:	89 23       	and	r24, r25
 50c:	89 83       	std	Y+1, r24	; 0x01
 50e:	0a c1       	rjmp	.+532    	; 0x724 <_fpadd_parts+0x286>
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	09 f4       	brne	.+2      	; 0x516 <_fpadd_parts+0x78>
 514:	05 c1       	rjmp	.+522    	; 0x720 <_fpadd_parts+0x282>
 516:	c2 80       	ldd	r12, Z+2	; 0x02
 518:	d3 80       	ldd	r13, Z+3	; 0x03
 51a:	db 01       	movw	r26, r22
 51c:	12 96       	adiw	r26, 0x02	; 2
 51e:	6d 90       	ld	r6, X+
 520:	7c 90       	ld	r7, X
 522:	13 97       	sbiw	r26, 0x03	; 3
 524:	24 81       	ldd	r18, Z+4	; 0x04
 526:	35 81       	ldd	r19, Z+5	; 0x05
 528:	46 81       	ldd	r20, Z+6	; 0x06
 52a:	57 81       	ldd	r21, Z+7	; 0x07
 52c:	14 96       	adiw	r26, 0x04	; 4
 52e:	ed 90       	ld	r14, X+
 530:	fd 90       	ld	r15, X+
 532:	0d 91       	ld	r16, X+
 534:	1c 91       	ld	r17, X
 536:	17 97       	sbiw	r26, 0x07	; 7
 538:	c6 01       	movw	r24, r12
 53a:	86 19       	sub	r24, r6
 53c:	97 09       	sbc	r25, r7
 53e:	5c 01       	movw	r10, r24
 540:	97 ff       	sbrs	r25, 7
 542:	04 c0       	rjmp	.+8      	; 0x54c <_fpadd_parts+0xae>
 544:	aa 24       	eor	r10, r10
 546:	bb 24       	eor	r11, r11
 548:	a8 1a       	sub	r10, r24
 54a:	b9 0a       	sbc	r11, r25
 54c:	b0 e2       	ldi	r27, 0x20	; 32
 54e:	ab 16       	cp	r10, r27
 550:	b1 04       	cpc	r11, r1
 552:	0c f0       	brlt	.+2      	; 0x556 <_fpadd_parts+0xb8>
 554:	61 c0       	rjmp	.+194    	; 0x618 <_fpadd_parts+0x17a>
 556:	18 16       	cp	r1, r24
 558:	19 06       	cpc	r1, r25
 55a:	6c f5       	brge	.+90     	; 0x5b6 <_fpadd_parts+0x118>
 55c:	37 01       	movw	r6, r14
 55e:	48 01       	movw	r8, r16
 560:	0a 2c       	mov	r0, r10
 562:	04 c0       	rjmp	.+8      	; 0x56c <_fpadd_parts+0xce>
 564:	96 94       	lsr	r9
 566:	87 94       	ror	r8
 568:	77 94       	ror	r7
 56a:	67 94       	ror	r6
 56c:	0a 94       	dec	r0
 56e:	d2 f7       	brpl	.-12     	; 0x564 <_fpadd_parts+0xc6>
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	0a 2c       	mov	r0, r10
 57a:	04 c0       	rjmp	.+8      	; 0x584 <_fpadd_parts+0xe6>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	aa 1f       	adc	r26, r26
 582:	bb 1f       	adc	r27, r27
 584:	0a 94       	dec	r0
 586:	d2 f7       	brpl	.-12     	; 0x57c <_fpadd_parts+0xde>
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	a1 09       	sbc	r26, r1
 58c:	b1 09       	sbc	r27, r1
 58e:	8e 21       	and	r24, r14
 590:	9f 21       	and	r25, r15
 592:	a0 23       	and	r26, r16
 594:	b1 23       	and	r27, r17
 596:	ee 24       	eor	r14, r14
 598:	ff 24       	eor	r15, r15
 59a:	87 01       	movw	r16, r14
 59c:	e3 94       	inc	r14
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	a1 05       	cpc	r26, r1
 5a2:	b1 05       	cpc	r27, r1
 5a4:	19 f4       	brne	.+6      	; 0x5ac <_fpadd_parts+0x10e>
 5a6:	ee 24       	eor	r14, r14
 5a8:	ff 24       	eor	r15, r15
 5aa:	87 01       	movw	r16, r14
 5ac:	e6 28       	or	r14, r6
 5ae:	f7 28       	or	r15, r7
 5b0:	08 29       	or	r16, r8
 5b2:	19 29       	or	r17, r9
 5b4:	3c c0       	rjmp	.+120    	; 0x62e <_fpadd_parts+0x190>
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	d1 f1       	breq	.+116    	; 0x62e <_fpadd_parts+0x190>
 5ba:	ca 0c       	add	r12, r10
 5bc:	db 1c       	adc	r13, r11
 5be:	39 01       	movw	r6, r18
 5c0:	4a 01       	movw	r8, r20
 5c2:	0a 2c       	mov	r0, r10
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <_fpadd_parts+0x130>
 5c6:	96 94       	lsr	r9
 5c8:	87 94       	ror	r8
 5ca:	77 94       	ror	r7
 5cc:	67 94       	ror	r6
 5ce:	0a 94       	dec	r0
 5d0:	d2 f7       	brpl	.-12     	; 0x5c6 <_fpadd_parts+0x128>
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a0 e0       	ldi	r26, 0x00	; 0
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	0a 2c       	mov	r0, r10
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <_fpadd_parts+0x148>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	aa 1f       	adc	r26, r26
 5e4:	bb 1f       	adc	r27, r27
 5e6:	0a 94       	dec	r0
 5e8:	d2 f7       	brpl	.-12     	; 0x5de <_fpadd_parts+0x140>
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	a1 09       	sbc	r26, r1
 5ee:	b1 09       	sbc	r27, r1
 5f0:	82 23       	and	r24, r18
 5f2:	93 23       	and	r25, r19
 5f4:	a4 23       	and	r26, r20
 5f6:	b5 23       	and	r27, r21
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	a1 05       	cpc	r26, r1
 604:	b1 05       	cpc	r27, r1
 606:	19 f4       	brne	.+6      	; 0x60e <_fpadd_parts+0x170>
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	26 29       	or	r18, r6
 610:	37 29       	or	r19, r7
 612:	48 29       	or	r20, r8
 614:	59 29       	or	r21, r9
 616:	0b c0       	rjmp	.+22     	; 0x62e <_fpadd_parts+0x190>
 618:	6c 14       	cp	r6, r12
 61a:	7d 04       	cpc	r7, r13
 61c:	24 f4       	brge	.+8      	; 0x626 <_fpadd_parts+0x188>
 61e:	ee 24       	eor	r14, r14
 620:	ff 24       	eor	r15, r15
 622:	87 01       	movw	r16, r14
 624:	04 c0       	rjmp	.+8      	; 0x62e <_fpadd_parts+0x190>
 626:	63 01       	movw	r12, r6
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	a9 01       	movw	r20, r18
 62e:	81 81       	ldd	r24, Z+1	; 0x01
 630:	fb 01       	movw	r30, r22
 632:	91 81       	ldd	r25, Z+1	; 0x01
 634:	89 17       	cp	r24, r25
 636:	09 f4       	brne	.+2      	; 0x63a <_fpadd_parts+0x19c>
 638:	45 c0       	rjmp	.+138    	; 0x6c4 <_fpadd_parts+0x226>
 63a:	88 23       	and	r24, r24
 63c:	49 f0       	breq	.+18     	; 0x650 <_fpadd_parts+0x1b2>
 63e:	d8 01       	movw	r26, r16
 640:	c7 01       	movw	r24, r14
 642:	82 1b       	sub	r24, r18
 644:	93 0b       	sbc	r25, r19
 646:	a4 0b       	sbc	r26, r20
 648:	b5 0b       	sbc	r27, r21
 64a:	9c 01       	movw	r18, r24
 64c:	ad 01       	movw	r20, r26
 64e:	04 c0       	rjmp	.+8      	; 0x658 <_fpadd_parts+0x1ba>
 650:	2e 19       	sub	r18, r14
 652:	3f 09       	sbc	r19, r15
 654:	40 0b       	sbc	r20, r16
 656:	51 0b       	sbc	r21, r17
 658:	57 fd       	sbrc	r21, 7
 65a:	04 c0       	rjmp	.+8      	; 0x664 <_fpadd_parts+0x1c6>
 65c:	19 82       	std	Y+1, r1	; 0x01
 65e:	db 82       	std	Y+3, r13	; 0x03
 660:	ca 82       	std	Y+2, r12	; 0x02
 662:	0b c0       	rjmp	.+22     	; 0x67a <_fpadd_parts+0x1dc>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	db 82       	std	Y+3, r13	; 0x03
 66a:	ca 82       	std	Y+2, r12	; 0x02
 66c:	50 95       	com	r21
 66e:	40 95       	com	r20
 670:	30 95       	com	r19
 672:	21 95       	neg	r18
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	4f 4f       	sbci	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	2c 83       	std	Y+4, r18	; 0x04
 67c:	3d 83       	std	Y+5, r19	; 0x05
 67e:	4e 83       	std	Y+6, r20	; 0x06
 680:	5f 83       	std	Y+7, r21	; 0x07
 682:	0d c0       	rjmp	.+26     	; 0x69e <_fpadd_parts+0x200>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	aa 1f       	adc	r26, r26
 68a:	bb 1f       	adc	r27, r27
 68c:	8c 83       	std	Y+4, r24	; 0x04
 68e:	9d 83       	std	Y+5, r25	; 0x05
 690:	ae 83       	std	Y+6, r26	; 0x06
 692:	bf 83       	std	Y+7, r27	; 0x07
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	9b 81       	ldd	r25, Y+3	; 0x03
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	9b 83       	std	Y+3, r25	; 0x03
 69c:	8a 83       	std	Y+2, r24	; 0x02
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	9d 81       	ldd	r25, Y+5	; 0x05
 6a2:	ae 81       	ldd	r26, Y+6	; 0x06
 6a4:	bf 81       	ldd	r27, Y+7	; 0x07
 6a6:	9c 01       	movw	r18, r24
 6a8:	ad 01       	movw	r20, r26
 6aa:	21 50       	subi	r18, 0x01	; 1
 6ac:	30 40       	sbci	r19, 0x00	; 0
 6ae:	40 40       	sbci	r20, 0x00	; 0
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	2f 3f       	cpi	r18, 0xFF	; 255
 6b4:	ef ef       	ldi	r30, 0xFF	; 255
 6b6:	3e 07       	cpc	r19, r30
 6b8:	ef ef       	ldi	r30, 0xFF	; 255
 6ba:	4e 07       	cpc	r20, r30
 6bc:	ef e3       	ldi	r30, 0x3F	; 63
 6be:	5e 07       	cpc	r21, r30
 6c0:	08 f3       	brcs	.-62     	; 0x684 <_fpadd_parts+0x1e6>
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <_fpadd_parts+0x23c>
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	db 82       	std	Y+3, r13	; 0x03
 6c8:	ca 82       	std	Y+2, r12	; 0x02
 6ca:	2e 0d       	add	r18, r14
 6cc:	3f 1d       	adc	r19, r15
 6ce:	40 1f       	adc	r20, r16
 6d0:	51 1f       	adc	r21, r17
 6d2:	2c 83       	std	Y+4, r18	; 0x04
 6d4:	3d 83       	std	Y+5, r19	; 0x05
 6d6:	4e 83       	std	Y+6, r20	; 0x06
 6d8:	5f 83       	std	Y+7, r21	; 0x07
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	88 83       	st	Y, r24
 6de:	2c 81       	ldd	r18, Y+4	; 0x04
 6e0:	3d 81       	ldd	r19, Y+5	; 0x05
 6e2:	4e 81       	ldd	r20, Y+6	; 0x06
 6e4:	5f 81       	ldd	r21, Y+7	; 0x07
 6e6:	57 ff       	sbrs	r21, 7
 6e8:	1d c0       	rjmp	.+58     	; 0x724 <_fpadd_parts+0x286>
 6ea:	da 01       	movw	r26, r20
 6ec:	c9 01       	movw	r24, r18
 6ee:	81 70       	andi	r24, 0x01	; 1
 6f0:	90 70       	andi	r25, 0x00	; 0
 6f2:	a0 70       	andi	r26, 0x00	; 0
 6f4:	b0 70       	andi	r27, 0x00	; 0
 6f6:	56 95       	lsr	r21
 6f8:	47 95       	ror	r20
 6fa:	37 95       	ror	r19
 6fc:	27 95       	ror	r18
 6fe:	82 2b       	or	r24, r18
 700:	93 2b       	or	r25, r19
 702:	a4 2b       	or	r26, r20
 704:	b5 2b       	or	r27, r21
 706:	8c 83       	std	Y+4, r24	; 0x04
 708:	9d 83       	std	Y+5, r25	; 0x05
 70a:	ae 83       	std	Y+6, r26	; 0x06
 70c:	bf 83       	std	Y+7, r27	; 0x07
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	9b 81       	ldd	r25, Y+3	; 0x03
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	9b 83       	std	Y+3, r25	; 0x03
 716:	8a 83       	std	Y+2, r24	; 0x02
 718:	05 c0       	rjmp	.+10     	; 0x724 <_fpadd_parts+0x286>
 71a:	e0 e6       	ldi	r30, 0x60	; 96
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	03 c0       	rjmp	.+6      	; 0x726 <_fpadd_parts+0x288>
 720:	fb 01       	movw	r30, r22
 722:	01 c0       	rjmp	.+2      	; 0x726 <_fpadd_parts+0x288>
 724:	fe 01       	movw	r30, r28
 726:	cf 01       	movw	r24, r30
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	ee e0       	ldi	r30, 0x0E	; 14
 72e:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__epilogue_restores__+0x8>

00000732 <__addsf3>:
 732:	a0 e2       	ldi	r26, 0x20	; 32
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	ef e9       	ldi	r30, 0x9F	; 159
 738:	f3 e0       	ldi	r31, 0x03	; 3
 73a:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__+0x18>
 73e:	69 83       	std	Y+1, r22	; 0x01
 740:	7a 83       	std	Y+2, r23	; 0x02
 742:	8b 83       	std	Y+3, r24	; 0x03
 744:	9c 83       	std	Y+4, r25	; 0x04
 746:	2d 83       	std	Y+5, r18	; 0x05
 748:	3e 83       	std	Y+6, r19	; 0x06
 74a:	4f 83       	std	Y+7, r20	; 0x07
 74c:	58 87       	std	Y+8, r21	; 0x08
 74e:	89 e0       	ldi	r24, 0x09	; 9
 750:	e8 2e       	mov	r14, r24
 752:	f1 2c       	mov	r15, r1
 754:	ec 0e       	add	r14, r28
 756:	fd 1e       	adc	r15, r29
 758:	ce 01       	movw	r24, r28
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	b7 01       	movw	r22, r14
 75e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 762:	8e 01       	movw	r16, r28
 764:	0f 5e       	subi	r16, 0xEF	; 239
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	ce 01       	movw	r24, r28
 76a:	05 96       	adiw	r24, 0x05	; 5
 76c:	b8 01       	movw	r22, r16
 76e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 772:	c7 01       	movw	r24, r14
 774:	b8 01       	movw	r22, r16
 776:	ae 01       	movw	r20, r28
 778:	47 5e       	subi	r20, 0xE7	; 231
 77a:	5f 4f       	sbci	r21, 0xFF	; 255
 77c:	0e 94 4f 02 	call	0x49e	; 0x49e <_fpadd_parts>
 780:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
 784:	a0 96       	adiw	r28, 0x20	; 32
 786:	e6 e0       	ldi	r30, 0x06	; 6
 788:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

0000078c <__subsf3>:
 78c:	a0 e2       	ldi	r26, 0x20	; 32
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	ec ec       	ldi	r30, 0xCC	; 204
 792:	f3 e0       	ldi	r31, 0x03	; 3
 794:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__+0x18>
 798:	69 83       	std	Y+1, r22	; 0x01
 79a:	7a 83       	std	Y+2, r23	; 0x02
 79c:	8b 83       	std	Y+3, r24	; 0x03
 79e:	9c 83       	std	Y+4, r25	; 0x04
 7a0:	2d 83       	std	Y+5, r18	; 0x05
 7a2:	3e 83       	std	Y+6, r19	; 0x06
 7a4:	4f 83       	std	Y+7, r20	; 0x07
 7a6:	58 87       	std	Y+8, r21	; 0x08
 7a8:	8e 01       	movw	r16, r28
 7aa:	07 5f       	subi	r16, 0xF7	; 247
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	b8 01       	movw	r22, r16
 7b4:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 7b8:	91 e1       	ldi	r25, 0x11	; 17
 7ba:	e9 2e       	mov	r14, r25
 7bc:	f1 2c       	mov	r15, r1
 7be:	ec 0e       	add	r14, r28
 7c0:	fd 1e       	adc	r15, r29
 7c2:	ce 01       	movw	r24, r28
 7c4:	05 96       	adiw	r24, 0x05	; 5
 7c6:	b7 01       	movw	r22, r14
 7c8:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 7cc:	8a 89       	ldd	r24, Y+18	; 0x12
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	89 27       	eor	r24, r25
 7d2:	8a 8b       	std	Y+18, r24	; 0x12
 7d4:	c8 01       	movw	r24, r16
 7d6:	b7 01       	movw	r22, r14
 7d8:	ae 01       	movw	r20, r28
 7da:	47 5e       	subi	r20, 0xE7	; 231
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	0e 94 4f 02 	call	0x49e	; 0x49e <_fpadd_parts>
 7e2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
 7e6:	a0 96       	adiw	r28, 0x20	; 32
 7e8:	e6 e0       	ldi	r30, 0x06	; 6
 7ea:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

000007ee <__mulsf3>:
 7ee:	a0 e2       	ldi	r26, 0x20	; 32
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	ed ef       	ldi	r30, 0xFD	; 253
 7f4:	f3 e0       	ldi	r31, 0x03	; 3
 7f6:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__prologue_saves__>
 7fa:	69 83       	std	Y+1, r22	; 0x01
 7fc:	7a 83       	std	Y+2, r23	; 0x02
 7fe:	8b 83       	std	Y+3, r24	; 0x03
 800:	9c 83       	std	Y+4, r25	; 0x04
 802:	2d 83       	std	Y+5, r18	; 0x05
 804:	3e 83       	std	Y+6, r19	; 0x06
 806:	4f 83       	std	Y+7, r20	; 0x07
 808:	58 87       	std	Y+8, r21	; 0x08
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	be 01       	movw	r22, r28
 810:	67 5f       	subi	r22, 0xF7	; 247
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 818:	ce 01       	movw	r24, r28
 81a:	05 96       	adiw	r24, 0x05	; 5
 81c:	be 01       	movw	r22, r28
 81e:	6f 5e       	subi	r22, 0xEF	; 239
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 826:	99 85       	ldd	r25, Y+9	; 0x09
 828:	92 30       	cpi	r25, 0x02	; 2
 82a:	78 f0       	brcs	.+30     	; 0x84a <__mulsf3+0x5c>
 82c:	89 89       	ldd	r24, Y+17	; 0x11
 82e:	82 30       	cpi	r24, 0x02	; 2
 830:	c0 f0       	brcs	.+48     	; 0x862 <__mulsf3+0x74>
 832:	94 30       	cpi	r25, 0x04	; 4
 834:	19 f4       	brne	.+6      	; 0x83c <__mulsf3+0x4e>
 836:	82 30       	cpi	r24, 0x02	; 2
 838:	41 f4       	brne	.+16     	; 0x84a <__mulsf3+0x5c>
 83a:	cb c0       	rjmp	.+406    	; 0x9d2 <__mulsf3+0x1e4>
 83c:	84 30       	cpi	r24, 0x04	; 4
 83e:	19 f4       	brne	.+6      	; 0x846 <__mulsf3+0x58>
 840:	92 30       	cpi	r25, 0x02	; 2
 842:	79 f4       	brne	.+30     	; 0x862 <__mulsf3+0x74>
 844:	c6 c0       	rjmp	.+396    	; 0x9d2 <__mulsf3+0x1e4>
 846:	92 30       	cpi	r25, 0x02	; 2
 848:	51 f4       	brne	.+20     	; 0x85e <__mulsf3+0x70>
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	2a 85       	ldd	r18, Y+10	; 0x0a
 84e:	9a 89       	ldd	r25, Y+18	; 0x12
 850:	29 17       	cp	r18, r25
 852:	09 f4       	brne	.+2      	; 0x856 <__mulsf3+0x68>
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	8a 87       	std	Y+10, r24	; 0x0a
 858:	ce 01       	movw	r24, r28
 85a:	09 96       	adiw	r24, 0x09	; 9
 85c:	bc c0       	rjmp	.+376    	; 0x9d6 <__mulsf3+0x1e8>
 85e:	82 30       	cpi	r24, 0x02	; 2
 860:	51 f4       	brne	.+20     	; 0x876 <__mulsf3+0x88>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	2a 85       	ldd	r18, Y+10	; 0x0a
 866:	9a 89       	ldd	r25, Y+18	; 0x12
 868:	29 17       	cp	r18, r25
 86a:	09 f4       	brne	.+2      	; 0x86e <__mulsf3+0x80>
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	8a 8b       	std	Y+18, r24	; 0x12
 870:	ce 01       	movw	r24, r28
 872:	41 96       	adiw	r24, 0x11	; 17
 874:	b0 c0       	rjmp	.+352    	; 0x9d6 <__mulsf3+0x1e8>
 876:	6d 84       	ldd	r6, Y+13	; 0x0d
 878:	7e 84       	ldd	r7, Y+14	; 0x0e
 87a:	8f 84       	ldd	r8, Y+15	; 0x0f
 87c:	98 88       	ldd	r9, Y+16	; 0x10
 87e:	ed 88       	ldd	r14, Y+21	; 0x15
 880:	fe 88       	ldd	r15, Y+22	; 0x16
 882:	0f 89       	ldd	r16, Y+23	; 0x17
 884:	18 8d       	ldd	r17, Y+24	; 0x18
 886:	e0 e2       	ldi	r30, 0x20	; 32
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	dc 01       	movw	r26, r24
 890:	aa 24       	eor	r10, r10
 892:	bb 24       	eor	r11, r11
 894:	65 01       	movw	r12, r10
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	a9 01       	movw	r20, r18
 89c:	b3 01       	movw	r22, r6
 89e:	61 70       	andi	r22, 0x01	; 1
 8a0:	70 70       	andi	r23, 0x00	; 0
 8a2:	61 15       	cp	r22, r1
 8a4:	71 05       	cpc	r23, r1
 8a6:	d1 f0       	breq	.+52     	; 0x8dc <__mulsf3+0xee>
 8a8:	2e 0d       	add	r18, r14
 8aa:	3f 1d       	adc	r19, r15
 8ac:	40 1f       	adc	r20, r16
 8ae:	51 1f       	adc	r21, r17
 8b0:	15 01       	movw	r2, r10
 8b2:	26 01       	movw	r4, r12
 8b4:	28 0e       	add	r2, r24
 8b6:	39 1e       	adc	r3, r25
 8b8:	4a 1e       	adc	r4, r26
 8ba:	5b 1e       	adc	r5, r27
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	a0 e0       	ldi	r26, 0x00	; 0
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	2e 15       	cp	r18, r14
 8c6:	3f 05       	cpc	r19, r15
 8c8:	40 07       	cpc	r20, r16
 8ca:	51 07       	cpc	r21, r17
 8cc:	18 f0       	brcs	.+6      	; 0x8d4 <__mulsf3+0xe6>
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	dc 01       	movw	r26, r24
 8d4:	82 0d       	add	r24, r2
 8d6:	93 1d       	adc	r25, r3
 8d8:	a4 1d       	adc	r26, r4
 8da:	b5 1d       	adc	r27, r5
 8dc:	aa 0c       	add	r10, r10
 8de:	bb 1c       	adc	r11, r11
 8e0:	cc 1c       	adc	r12, r12
 8e2:	dd 1c       	adc	r13, r13
 8e4:	17 ff       	sbrs	r17, 7
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__mulsf3+0x10c>
 8e8:	61 e0       	ldi	r22, 0x01	; 1
 8ea:	26 2e       	mov	r2, r22
 8ec:	31 2c       	mov	r3, r1
 8ee:	41 2c       	mov	r4, r1
 8f0:	51 2c       	mov	r5, r1
 8f2:	a2 28       	or	r10, r2
 8f4:	b3 28       	or	r11, r3
 8f6:	c4 28       	or	r12, r4
 8f8:	d5 28       	or	r13, r5
 8fa:	31 97       	sbiw	r30, 0x01	; 1
 8fc:	49 f0       	breq	.+18     	; 0x910 <__mulsf3+0x122>
 8fe:	ee 0c       	add	r14, r14
 900:	ff 1c       	adc	r15, r15
 902:	00 1f       	adc	r16, r16
 904:	11 1f       	adc	r17, r17
 906:	96 94       	lsr	r9
 908:	87 94       	ror	r8
 90a:	77 94       	ror	r7
 90c:	67 94       	ror	r6
 90e:	c6 cf       	rjmp	.-116    	; 0x89c <__mulsf3+0xae>
 910:	6b 89       	ldd	r22, Y+19	; 0x13
 912:	7c 89       	ldd	r23, Y+20	; 0x14
 914:	eb 85       	ldd	r30, Y+11	; 0x0b
 916:	fc 85       	ldd	r31, Y+12	; 0x0c
 918:	6e 0f       	add	r22, r30
 91a:	7f 1f       	adc	r23, r31
 91c:	6e 5f       	subi	r22, 0xFE	; 254
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	7c 8f       	std	Y+28, r23	; 0x1c
 922:	6b 8f       	std	Y+27, r22	; 0x1b
 924:	61 e0       	ldi	r22, 0x01	; 1
 926:	ea 85       	ldd	r30, Y+10	; 0x0a
 928:	7a 89       	ldd	r23, Y+18	; 0x12
 92a:	e7 17       	cp	r30, r23
 92c:	09 f4       	brne	.+2      	; 0x930 <__mulsf3+0x142>
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	6a 8f       	std	Y+26, r22	; 0x1a
 932:	6b 8d       	ldd	r22, Y+27	; 0x1b
 934:	7c 8d       	ldd	r23, Y+28	; 0x1c
 936:	10 c0       	rjmp	.+32     	; 0x958 <__mulsf3+0x16a>
 938:	fc 01       	movw	r30, r24
 93a:	e1 70       	andi	r30, 0x01	; 1
 93c:	f0 70       	andi	r31, 0x00	; 0
 93e:	30 97       	sbiw	r30, 0x00	; 0
 940:	29 f0       	breq	.+10     	; 0x94c <__mulsf3+0x15e>
 942:	56 95       	lsr	r21
 944:	47 95       	ror	r20
 946:	37 95       	ror	r19
 948:	27 95       	ror	r18
 94a:	50 68       	ori	r21, 0x80	; 128
 94c:	b6 95       	lsr	r27
 94e:	a7 95       	ror	r26
 950:	97 95       	ror	r25
 952:	87 95       	ror	r24
 954:	6f 5f       	subi	r22, 0xFF	; 255
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	b7 fd       	sbrc	r27, 7
 95a:	ee cf       	rjmp	.-36     	; 0x938 <__mulsf3+0x14a>
 95c:	0c c0       	rjmp	.+24     	; 0x976 <__mulsf3+0x188>
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	aa 1f       	adc	r26, r26
 964:	bb 1f       	adc	r27, r27
 966:	57 fd       	sbrc	r21, 7
 968:	81 60       	ori	r24, 0x01	; 1
 96a:	22 0f       	add	r18, r18
 96c:	33 1f       	adc	r19, r19
 96e:	44 1f       	adc	r20, r20
 970:	55 1f       	adc	r21, r21
 972:	61 50       	subi	r22, 0x01	; 1
 974:	70 40       	sbci	r23, 0x00	; 0
 976:	80 30       	cpi	r24, 0x00	; 0
 978:	e0 e0       	ldi	r30, 0x00	; 0
 97a:	9e 07       	cpc	r25, r30
 97c:	e0 e0       	ldi	r30, 0x00	; 0
 97e:	ae 07       	cpc	r26, r30
 980:	e0 e4       	ldi	r30, 0x40	; 64
 982:	be 07       	cpc	r27, r30
 984:	60 f3       	brcs	.-40     	; 0x95e <__mulsf3+0x170>
 986:	6b 8f       	std	Y+27, r22	; 0x1b
 988:	7c 8f       	std	Y+28, r23	; 0x1c
 98a:	6f e7       	ldi	r22, 0x7F	; 127
 98c:	e6 2e       	mov	r14, r22
 98e:	f1 2c       	mov	r15, r1
 990:	01 2d       	mov	r16, r1
 992:	11 2d       	mov	r17, r1
 994:	e8 22       	and	r14, r24
 996:	f9 22       	and	r15, r25
 998:	0a 23       	and	r16, r26
 99a:	1b 23       	and	r17, r27
 99c:	60 e4       	ldi	r22, 0x40	; 64
 99e:	e6 16       	cp	r14, r22
 9a0:	f1 04       	cpc	r15, r1
 9a2:	01 05       	cpc	r16, r1
 9a4:	11 05       	cpc	r17, r1
 9a6:	61 f4       	brne	.+24     	; 0x9c0 <__mulsf3+0x1d2>
 9a8:	87 fd       	sbrc	r24, 7
 9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <__mulsf3+0x1d2>
 9ac:	21 15       	cp	r18, r1
 9ae:	31 05       	cpc	r19, r1
 9b0:	41 05       	cpc	r20, r1
 9b2:	51 05       	cpc	r21, r1
 9b4:	29 f0       	breq	.+10     	; 0x9c0 <__mulsf3+0x1d2>
 9b6:	80 5c       	subi	r24, 0xC0	; 192
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	af 4f       	sbci	r26, 0xFF	; 255
 9bc:	bf 4f       	sbci	r27, 0xFF	; 255
 9be:	80 78       	andi	r24, 0x80	; 128
 9c0:	8d 8f       	std	Y+29, r24	; 0x1d
 9c2:	9e 8f       	std	Y+30, r25	; 0x1e
 9c4:	af 8f       	std	Y+31, r26	; 0x1f
 9c6:	b8 a3       	std	Y+32, r27	; 0x20
 9c8:	83 e0       	ldi	r24, 0x03	; 3
 9ca:	89 8f       	std	Y+25, r24	; 0x19
 9cc:	ce 01       	movw	r24, r28
 9ce:	49 96       	adiw	r24, 0x19	; 25
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__mulsf3+0x1e8>
 9d2:	80 e6       	ldi	r24, 0x60	; 96
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
 9da:	a0 96       	adiw	r28, 0x20	; 32
 9dc:	e2 e1       	ldi	r30, 0x12	; 18
 9de:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__epilogue_restores__>

000009e2 <__gtsf2>:
 9e2:	a8 e1       	ldi	r26, 0x18	; 24
 9e4:	b0 e0       	ldi	r27, 0x00	; 0
 9e6:	e7 ef       	ldi	r30, 0xF7	; 247
 9e8:	f4 e0       	ldi	r31, 0x04	; 4
 9ea:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__+0x18>
 9ee:	69 83       	std	Y+1, r22	; 0x01
 9f0:	7a 83       	std	Y+2, r23	; 0x02
 9f2:	8b 83       	std	Y+3, r24	; 0x03
 9f4:	9c 83       	std	Y+4, r25	; 0x04
 9f6:	2d 83       	std	Y+5, r18	; 0x05
 9f8:	3e 83       	std	Y+6, r19	; 0x06
 9fa:	4f 83       	std	Y+7, r20	; 0x07
 9fc:	58 87       	std	Y+8, r21	; 0x08
 9fe:	8e 01       	movw	r16, r28
 a00:	07 5f       	subi	r16, 0xF7	; 247
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	ce 01       	movw	r24, r28
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	b8 01       	movw	r22, r16
 a0a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 a0e:	81 e1       	ldi	r24, 0x11	; 17
 a10:	e8 2e       	mov	r14, r24
 a12:	f1 2c       	mov	r15, r1
 a14:	ec 0e       	add	r14, r28
 a16:	fd 1e       	adc	r15, r29
 a18:	ce 01       	movw	r24, r28
 a1a:	05 96       	adiw	r24, 0x05	; 5
 a1c:	b7 01       	movw	r22, r14
 a1e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 a22:	89 85       	ldd	r24, Y+9	; 0x09
 a24:	82 30       	cpi	r24, 0x02	; 2
 a26:	40 f0       	brcs	.+16     	; 0xa38 <__gtsf2+0x56>
 a28:	89 89       	ldd	r24, Y+17	; 0x11
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	28 f0       	brcs	.+10     	; 0xa38 <__gtsf2+0x56>
 a2e:	c8 01       	movw	r24, r16
 a30:	b7 01       	movw	r22, r14
 a32:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fpcmp_parts_f>
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <__gtsf2+0x58>
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	68 96       	adiw	r28, 0x18	; 24
 a3c:	e6 e0       	ldi	r30, 0x06	; 6
 a3e:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

00000a42 <__gesf2>:
 a42:	a8 e1       	ldi	r26, 0x18	; 24
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	e7 e2       	ldi	r30, 0x27	; 39
 a48:	f5 e0       	ldi	r31, 0x05	; 5
 a4a:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__+0x18>
 a4e:	69 83       	std	Y+1, r22	; 0x01
 a50:	7a 83       	std	Y+2, r23	; 0x02
 a52:	8b 83       	std	Y+3, r24	; 0x03
 a54:	9c 83       	std	Y+4, r25	; 0x04
 a56:	2d 83       	std	Y+5, r18	; 0x05
 a58:	3e 83       	std	Y+6, r19	; 0x06
 a5a:	4f 83       	std	Y+7, r20	; 0x07
 a5c:	58 87       	std	Y+8, r21	; 0x08
 a5e:	8e 01       	movw	r16, r28
 a60:	07 5f       	subi	r16, 0xF7	; 247
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	ce 01       	movw	r24, r28
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	b8 01       	movw	r22, r16
 a6a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 a6e:	81 e1       	ldi	r24, 0x11	; 17
 a70:	e8 2e       	mov	r14, r24
 a72:	f1 2c       	mov	r15, r1
 a74:	ec 0e       	add	r14, r28
 a76:	fd 1e       	adc	r15, r29
 a78:	ce 01       	movw	r24, r28
 a7a:	05 96       	adiw	r24, 0x05	; 5
 a7c:	b7 01       	movw	r22, r14
 a7e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 a82:	89 85       	ldd	r24, Y+9	; 0x09
 a84:	82 30       	cpi	r24, 0x02	; 2
 a86:	40 f0       	brcs	.+16     	; 0xa98 <__gesf2+0x56>
 a88:	89 89       	ldd	r24, Y+17	; 0x11
 a8a:	82 30       	cpi	r24, 0x02	; 2
 a8c:	28 f0       	brcs	.+10     	; 0xa98 <__gesf2+0x56>
 a8e:	c8 01       	movw	r24, r16
 a90:	b7 01       	movw	r22, r14
 a92:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fpcmp_parts_f>
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <__gesf2+0x58>
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	68 96       	adiw	r28, 0x18	; 24
 a9c:	e6 e0       	ldi	r30, 0x06	; 6
 a9e:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

00000aa2 <__ltsf2>:
 aa2:	a8 e1       	ldi	r26, 0x18	; 24
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	e7 e5       	ldi	r30, 0x57	; 87
 aa8:	f5 e0       	ldi	r31, 0x05	; 5
 aaa:	0c 94 6f 07 	jmp	0xede	; 0xede <__prologue_saves__+0x18>
 aae:	69 83       	std	Y+1, r22	; 0x01
 ab0:	7a 83       	std	Y+2, r23	; 0x02
 ab2:	8b 83       	std	Y+3, r24	; 0x03
 ab4:	9c 83       	std	Y+4, r25	; 0x04
 ab6:	2d 83       	std	Y+5, r18	; 0x05
 ab8:	3e 83       	std	Y+6, r19	; 0x06
 aba:	4f 83       	std	Y+7, r20	; 0x07
 abc:	58 87       	std	Y+8, r21	; 0x08
 abe:	8e 01       	movw	r16, r28
 ac0:	07 5f       	subi	r16, 0xF7	; 247
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	ce 01       	movw	r24, r28
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	b8 01       	movw	r22, r16
 aca:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 ace:	81 e1       	ldi	r24, 0x11	; 17
 ad0:	e8 2e       	mov	r14, r24
 ad2:	f1 2c       	mov	r15, r1
 ad4:	ec 0e       	add	r14, r28
 ad6:	fd 1e       	adc	r15, r29
 ad8:	ce 01       	movw	r24, r28
 ada:	05 96       	adiw	r24, 0x05	; 5
 adc:	b7 01       	movw	r22, r14
 ade:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 ae2:	89 85       	ldd	r24, Y+9	; 0x09
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	40 f0       	brcs	.+16     	; 0xaf8 <__ltsf2+0x56>
 ae8:	89 89       	ldd	r24, Y+17	; 0x11
 aea:	82 30       	cpi	r24, 0x02	; 2
 aec:	28 f0       	brcs	.+10     	; 0xaf8 <__ltsf2+0x56>
 aee:	c8 01       	movw	r24, r16
 af0:	b7 01       	movw	r22, r14
 af2:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fpcmp_parts_f>
 af6:	01 c0       	rjmp	.+2      	; 0xafa <__ltsf2+0x58>
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	68 96       	adiw	r28, 0x18	; 24
 afc:	e6 e0       	ldi	r30, 0x06	; 6
 afe:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

00000b02 <__fixsfsi>:
 b02:	ac e0       	ldi	r26, 0x0C	; 12
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	e7 e8       	ldi	r30, 0x87	; 135
 b08:	f5 e0       	ldi	r31, 0x05	; 5
 b0a:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__prologue_saves__+0x20>
 b0e:	69 83       	std	Y+1, r22	; 0x01
 b10:	7a 83       	std	Y+2, r23	; 0x02
 b12:	8b 83       	std	Y+3, r24	; 0x03
 b14:	9c 83       	std	Y+4, r25	; 0x04
 b16:	ce 01       	movw	r24, r28
 b18:	01 96       	adiw	r24, 0x01	; 1
 b1a:	be 01       	movw	r22, r28
 b1c:	6b 5f       	subi	r22, 0xFB	; 251
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	0e 94 a1 06 	call	0xd42	; 0xd42 <__unpack_f>
 b24:	8d 81       	ldd	r24, Y+5	; 0x05
 b26:	82 30       	cpi	r24, 0x02	; 2
 b28:	81 f1       	breq	.+96     	; 0xb8a <__fixsfsi+0x88>
 b2a:	82 30       	cpi	r24, 0x02	; 2
 b2c:	70 f1       	brcs	.+92     	; 0xb8a <__fixsfsi+0x88>
 b2e:	84 30       	cpi	r24, 0x04	; 4
 b30:	21 f4       	brne	.+8      	; 0xb3a <__fixsfsi+0x38>
 b32:	8e 81       	ldd	r24, Y+6	; 0x06
 b34:	88 23       	and	r24, r24
 b36:	69 f1       	breq	.+90     	; 0xb92 <__fixsfsi+0x90>
 b38:	0a c0       	rjmp	.+20     	; 0xb4e <__fixsfsi+0x4c>
 b3a:	2f 81       	ldd	r18, Y+7	; 0x07
 b3c:	38 85       	ldd	r19, Y+8	; 0x08
 b3e:	37 fd       	sbrc	r19, 7
 b40:	24 c0       	rjmp	.+72     	; 0xb8a <__fixsfsi+0x88>
 b42:	6e 81       	ldd	r22, Y+6	; 0x06
 b44:	2f 31       	cpi	r18, 0x1F	; 31
 b46:	31 05       	cpc	r19, r1
 b48:	3c f0       	brlt	.+14     	; 0xb58 <__fixsfsi+0x56>
 b4a:	66 23       	and	r22, r22
 b4c:	11 f1       	breq	.+68     	; 0xb92 <__fixsfsi+0x90>
 b4e:	20 e0       	ldi	r18, 0x00	; 0
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	40 e0       	ldi	r20, 0x00	; 0
 b54:	50 e8       	ldi	r21, 0x80	; 128
 b56:	21 c0       	rjmp	.+66     	; 0xb9a <__fixsfsi+0x98>
 b58:	8e e1       	ldi	r24, 0x1E	; 30
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	82 1b       	sub	r24, r18
 b5e:	93 0b       	sbc	r25, r19
 b60:	29 85       	ldd	r18, Y+9	; 0x09
 b62:	3a 85       	ldd	r19, Y+10	; 0x0a
 b64:	4b 85       	ldd	r20, Y+11	; 0x0b
 b66:	5c 85       	ldd	r21, Y+12	; 0x0c
 b68:	04 c0       	rjmp	.+8      	; 0xb72 <__fixsfsi+0x70>
 b6a:	56 95       	lsr	r21
 b6c:	47 95       	ror	r20
 b6e:	37 95       	ror	r19
 b70:	27 95       	ror	r18
 b72:	8a 95       	dec	r24
 b74:	d2 f7       	brpl	.-12     	; 0xb6a <__fixsfsi+0x68>
 b76:	66 23       	and	r22, r22
 b78:	81 f0       	breq	.+32     	; 0xb9a <__fixsfsi+0x98>
 b7a:	50 95       	com	r21
 b7c:	40 95       	com	r20
 b7e:	30 95       	com	r19
 b80:	21 95       	neg	r18
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	4f 4f       	sbci	r20, 0xFF	; 255
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	08 c0       	rjmp	.+16     	; 0xb9a <__fixsfsi+0x98>
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	a9 01       	movw	r20, r18
 b90:	04 c0       	rjmp	.+8      	; 0xb9a <__fixsfsi+0x98>
 b92:	2f ef       	ldi	r18, 0xFF	; 255
 b94:	3f ef       	ldi	r19, 0xFF	; 255
 b96:	4f ef       	ldi	r20, 0xFF	; 255
 b98:	5f e7       	ldi	r21, 0x7F	; 127
 b9a:	b9 01       	movw	r22, r18
 b9c:	ca 01       	movw	r24, r20
 b9e:	2c 96       	adiw	r28, 0x0c	; 12
 ba0:	e2 e0       	ldi	r30, 0x02	; 2
 ba2:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__epilogue_restores__+0x20>

00000ba6 <__pack_f>:
 ba6:	ef 92       	push	r14
 ba8:	ff 92       	push	r15
 baa:	0f 93       	push	r16
 bac:	1f 93       	push	r17
 bae:	cf 93       	push	r28
 bb0:	df 93       	push	r29
 bb2:	fc 01       	movw	r30, r24
 bb4:	24 81       	ldd	r18, Z+4	; 0x04
 bb6:	35 81       	ldd	r19, Z+5	; 0x05
 bb8:	46 81       	ldd	r20, Z+6	; 0x06
 bba:	57 81       	ldd	r21, Z+7	; 0x07
 bbc:	61 81       	ldd	r22, Z+1	; 0x01
 bbe:	80 81       	ld	r24, Z
 bc0:	82 30       	cpi	r24, 0x02	; 2
 bc2:	20 f4       	brcc	.+8      	; 0xbcc <__pack_f+0x26>
 bc4:	40 61       	ori	r20, 0x10	; 16
 bc6:	ef ef       	ldi	r30, 0xFF	; 255
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	a3 c0       	rjmp	.+326    	; 0xd12 <__pack_f+0x16c>
 bcc:	84 30       	cpi	r24, 0x04	; 4
 bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x2c>
 bd0:	9b c0       	rjmp	.+310    	; 0xd08 <__pack_f+0x162>
 bd2:	82 30       	cpi	r24, 0x02	; 2
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <__pack_f+0x32>
 bd6:	92 c0       	rjmp	.+292    	; 0xcfc <__pack_f+0x156>
 bd8:	21 15       	cp	r18, r1
 bda:	31 05       	cpc	r19, r1
 bdc:	41 05       	cpc	r20, r1
 bde:	51 05       	cpc	r21, r1
 be0:	09 f4       	brne	.+2      	; 0xbe4 <__pack_f+0x3e>
 be2:	8f c0       	rjmp	.+286    	; 0xd02 <__pack_f+0x15c>
 be4:	02 80       	ldd	r0, Z+2	; 0x02
 be6:	f3 81       	ldd	r31, Z+3	; 0x03
 be8:	e0 2d       	mov	r30, r0
 bea:	8f ef       	ldi	r24, 0xFF	; 255
 bec:	e2 38       	cpi	r30, 0x82	; 130
 bee:	f8 07       	cpc	r31, r24
 bf0:	0c f0       	brlt	.+2      	; 0xbf4 <__pack_f+0x4e>
 bf2:	5a c0       	rjmp	.+180    	; 0xca8 <__pack_f+0x102>
 bf4:	c2 e8       	ldi	r28, 0x82	; 130
 bf6:	df ef       	ldi	r29, 0xFF	; 255
 bf8:	ce 1b       	sub	r28, r30
 bfa:	df 0b       	sbc	r29, r31
 bfc:	ca 31       	cpi	r28, 0x1A	; 26
 bfe:	d1 05       	cpc	r29, r1
 c00:	6c f5       	brge	.+90     	; 0xc5c <__pack_f+0xb6>
 c02:	79 01       	movw	r14, r18
 c04:	8a 01       	movw	r16, r20
 c06:	0c 2e       	mov	r0, r28
 c08:	04 c0       	rjmp	.+8      	; 0xc12 <__pack_f+0x6c>
 c0a:	16 95       	lsr	r17
 c0c:	07 95       	ror	r16
 c0e:	f7 94       	ror	r15
 c10:	e7 94       	ror	r14
 c12:	0a 94       	dec	r0
 c14:	d2 f7       	brpl	.-12     	; 0xc0a <__pack_f+0x64>
 c16:	81 e0       	ldi	r24, 0x01	; 1
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	a0 e0       	ldi	r26, 0x00	; 0
 c1c:	b0 e0       	ldi	r27, 0x00	; 0
 c1e:	0c 2e       	mov	r0, r28
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x84>
 c22:	88 0f       	add	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	aa 1f       	adc	r26, r26
 c28:	bb 1f       	adc	r27, r27
 c2a:	0a 94       	dec	r0
 c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x7c>
 c2e:	01 97       	sbiw	r24, 0x01	; 1
 c30:	a1 09       	sbc	r26, r1
 c32:	b1 09       	sbc	r27, r1
 c34:	82 23       	and	r24, r18
 c36:	93 23       	and	r25, r19
 c38:	a4 23       	and	r26, r20
 c3a:	b5 23       	and	r27, r21
 c3c:	21 e0       	ldi	r18, 0x01	; 1
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	40 e0       	ldi	r20, 0x00	; 0
 c42:	50 e0       	ldi	r21, 0x00	; 0
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	a1 05       	cpc	r26, r1
 c48:	b1 05       	cpc	r27, r1
 c4a:	19 f4       	brne	.+6      	; 0xc52 <__pack_f+0xac>
 c4c:	20 e0       	ldi	r18, 0x00	; 0
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	a9 01       	movw	r20, r18
 c52:	2e 29       	or	r18, r14
 c54:	3f 29       	or	r19, r15
 c56:	40 2b       	or	r20, r16
 c58:	51 2b       	or	r21, r17
 c5a:	03 c0       	rjmp	.+6      	; 0xc62 <__pack_f+0xbc>
 c5c:	20 e0       	ldi	r18, 0x00	; 0
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	a9 01       	movw	r20, r18
 c62:	da 01       	movw	r26, r20
 c64:	c9 01       	movw	r24, r18
 c66:	8f 77       	andi	r24, 0x7F	; 127
 c68:	90 70       	andi	r25, 0x00	; 0
 c6a:	a0 70       	andi	r26, 0x00	; 0
 c6c:	b0 70       	andi	r27, 0x00	; 0
 c6e:	80 34       	cpi	r24, 0x40	; 64
 c70:	91 05       	cpc	r25, r1
 c72:	a1 05       	cpc	r26, r1
 c74:	b1 05       	cpc	r27, r1
 c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0xe0>
 c78:	27 ff       	sbrs	r18, 7
 c7a:	09 c0       	rjmp	.+18     	; 0xc8e <__pack_f+0xe8>
 c7c:	20 5c       	subi	r18, 0xC0	; 192
 c7e:	3f 4f       	sbci	r19, 0xFF	; 255
 c80:	4f 4f       	sbci	r20, 0xFF	; 255
 c82:	5f 4f       	sbci	r21, 0xFF	; 255
 c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0xe8>
 c86:	21 5c       	subi	r18, 0xC1	; 193
 c88:	3f 4f       	sbci	r19, 0xFF	; 255
 c8a:	4f 4f       	sbci	r20, 0xFF	; 255
 c8c:	5f 4f       	sbci	r21, 0xFF	; 255
 c8e:	e1 e0       	ldi	r30, 0x01	; 1
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	20 30       	cpi	r18, 0x00	; 0
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	38 07       	cpc	r19, r24
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	48 07       	cpc	r20, r24
 c9c:	80 e4       	ldi	r24, 0x40	; 64
 c9e:	58 07       	cpc	r21, r24
 ca0:	28 f5       	brcc	.+74     	; 0xcec <__pack_f+0x146>
 ca2:	e0 e0       	ldi	r30, 0x00	; 0
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	22 c0       	rjmp	.+68     	; 0xcec <__pack_f+0x146>
 ca8:	e0 38       	cpi	r30, 0x80	; 128
 caa:	f1 05       	cpc	r31, r1
 cac:	6c f5       	brge	.+90     	; 0xd08 <__pack_f+0x162>
 cae:	e1 58       	subi	r30, 0x81	; 129
 cb0:	ff 4f       	sbci	r31, 0xFF	; 255
 cb2:	da 01       	movw	r26, r20
 cb4:	c9 01       	movw	r24, r18
 cb6:	8f 77       	andi	r24, 0x7F	; 127
 cb8:	90 70       	andi	r25, 0x00	; 0
 cba:	a0 70       	andi	r26, 0x00	; 0
 cbc:	b0 70       	andi	r27, 0x00	; 0
 cbe:	80 34       	cpi	r24, 0x40	; 64
 cc0:	91 05       	cpc	r25, r1
 cc2:	a1 05       	cpc	r26, r1
 cc4:	b1 05       	cpc	r27, r1
 cc6:	39 f4       	brne	.+14     	; 0xcd6 <__pack_f+0x130>
 cc8:	27 ff       	sbrs	r18, 7
 cca:	09 c0       	rjmp	.+18     	; 0xcde <__pack_f+0x138>
 ccc:	20 5c       	subi	r18, 0xC0	; 192
 cce:	3f 4f       	sbci	r19, 0xFF	; 255
 cd0:	4f 4f       	sbci	r20, 0xFF	; 255
 cd2:	5f 4f       	sbci	r21, 0xFF	; 255
 cd4:	04 c0       	rjmp	.+8      	; 0xcde <__pack_f+0x138>
 cd6:	21 5c       	subi	r18, 0xC1	; 193
 cd8:	3f 4f       	sbci	r19, 0xFF	; 255
 cda:	4f 4f       	sbci	r20, 0xFF	; 255
 cdc:	5f 4f       	sbci	r21, 0xFF	; 255
 cde:	57 ff       	sbrs	r21, 7
 ce0:	05 c0       	rjmp	.+10     	; 0xcec <__pack_f+0x146>
 ce2:	56 95       	lsr	r21
 ce4:	47 95       	ror	r20
 ce6:	37 95       	ror	r19
 ce8:	27 95       	ror	r18
 cea:	31 96       	adiw	r30, 0x01	; 1
 cec:	87 e0       	ldi	r24, 0x07	; 7
 cee:	56 95       	lsr	r21
 cf0:	47 95       	ror	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	8a 95       	dec	r24
 cf8:	d1 f7       	brne	.-12     	; 0xcee <__pack_f+0x148>
 cfa:	0b c0       	rjmp	.+22     	; 0xd12 <__pack_f+0x16c>
 cfc:	e0 e0       	ldi	r30, 0x00	; 0
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <__pack_f+0x166>
 d02:	e0 e0       	ldi	r30, 0x00	; 0
 d04:	f0 e0       	ldi	r31, 0x00	; 0
 d06:	05 c0       	rjmp	.+10     	; 0xd12 <__pack_f+0x16c>
 d08:	ef ef       	ldi	r30, 0xFF	; 255
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	20 e0       	ldi	r18, 0x00	; 0
 d0e:	30 e0       	ldi	r19, 0x00	; 0
 d10:	a9 01       	movw	r20, r18
 d12:	8e 2f       	mov	r24, r30
 d14:	87 95       	ror	r24
 d16:	88 27       	eor	r24, r24
 d18:	87 95       	ror	r24
 d1a:	94 2f       	mov	r25, r20
 d1c:	9f 77       	andi	r25, 0x7F	; 127
 d1e:	67 95       	ror	r22
 d20:	66 27       	eor	r22, r22
 d22:	67 95       	ror	r22
 d24:	e6 95       	lsr	r30
 d26:	e2 2e       	mov	r14, r18
 d28:	a9 2f       	mov	r26, r25
 d2a:	a8 2b       	or	r26, r24
 d2c:	fe 2f       	mov	r31, r30
 d2e:	f6 2b       	or	r31, r22
 d30:	62 2f       	mov	r22, r18
 d32:	73 2f       	mov	r23, r19
 d34:	8a 2f       	mov	r24, r26
 d36:	9f 2f       	mov	r25, r31
 d38:	cd b7       	in	r28, 0x3d	; 61
 d3a:	de b7       	in	r29, 0x3e	; 62
 d3c:	e6 e0       	ldi	r30, 0x06	; 6
 d3e:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__epilogue_restores__+0x18>

00000d42 <__unpack_f>:
 d42:	dc 01       	movw	r26, r24
 d44:	fb 01       	movw	r30, r22
 d46:	2c 91       	ld	r18, X
 d48:	11 96       	adiw	r26, 0x01	; 1
 d4a:	3c 91       	ld	r19, X
 d4c:	11 97       	sbiw	r26, 0x01	; 1
 d4e:	12 96       	adiw	r26, 0x02	; 2
 d50:	8c 91       	ld	r24, X
 d52:	12 97       	sbiw	r26, 0x02	; 2
 d54:	48 2f       	mov	r20, r24
 d56:	4f 77       	andi	r20, 0x7F	; 127
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	98 2f       	mov	r25, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	99 27       	eor	r25, r25
 d60:	99 1f       	adc	r25, r25
 d62:	13 96       	adiw	r26, 0x03	; 3
 d64:	6c 91       	ld	r22, X
 d66:	13 97       	sbiw	r26, 0x03	; 3
 d68:	86 2f       	mov	r24, r22
 d6a:	88 0f       	add	r24, r24
 d6c:	89 2b       	or	r24, r25
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	66 1f       	adc	r22, r22
 d72:	66 27       	eor	r22, r22
 d74:	66 1f       	adc	r22, r22
 d76:	61 83       	std	Z+1, r22	; 0x01
 d78:	00 97       	sbiw	r24, 0x00	; 0
 d7a:	39 f5       	brne	.+78     	; 0xdca <__unpack_f+0x88>
 d7c:	21 15       	cp	r18, r1
 d7e:	31 05       	cpc	r19, r1
 d80:	41 05       	cpc	r20, r1
 d82:	51 05       	cpc	r21, r1
 d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x48>
 d86:	82 e0       	ldi	r24, 0x02	; 2
 d88:	29 c0       	rjmp	.+82     	; 0xddc <__unpack_f+0x9a>
 d8a:	82 e8       	ldi	r24, 0x82	; 130
 d8c:	9f ef       	ldi	r25, 0xFF	; 255
 d8e:	93 83       	std	Z+3, r25	; 0x03
 d90:	82 83       	std	Z+2, r24	; 0x02
 d92:	67 e0       	ldi	r22, 0x07	; 7
 d94:	22 0f       	add	r18, r18
 d96:	33 1f       	adc	r19, r19
 d98:	44 1f       	adc	r20, r20
 d9a:	55 1f       	adc	r21, r21
 d9c:	6a 95       	dec	r22
 d9e:	d1 f7       	brne	.-12     	; 0xd94 <__unpack_f+0x52>
 da0:	83 e0       	ldi	r24, 0x03	; 3
 da2:	80 83       	st	Z, r24
 da4:	09 c0       	rjmp	.+18     	; 0xdb8 <__unpack_f+0x76>
 da6:	22 0f       	add	r18, r18
 da8:	33 1f       	adc	r19, r19
 daa:	44 1f       	adc	r20, r20
 dac:	55 1f       	adc	r21, r21
 dae:	82 81       	ldd	r24, Z+2	; 0x02
 db0:	93 81       	ldd	r25, Z+3	; 0x03
 db2:	01 97       	sbiw	r24, 0x01	; 1
 db4:	93 83       	std	Z+3, r25	; 0x03
 db6:	82 83       	std	Z+2, r24	; 0x02
 db8:	20 30       	cpi	r18, 0x00	; 0
 dba:	80 e0       	ldi	r24, 0x00	; 0
 dbc:	38 07       	cpc	r19, r24
 dbe:	80 e0       	ldi	r24, 0x00	; 0
 dc0:	48 07       	cpc	r20, r24
 dc2:	80 e4       	ldi	r24, 0x40	; 64
 dc4:	58 07       	cpc	r21, r24
 dc6:	78 f3       	brcs	.-34     	; 0xda6 <__unpack_f+0x64>
 dc8:	20 c0       	rjmp	.+64     	; 0xe0a <__unpack_f+0xc8>
 dca:	8f 3f       	cpi	r24, 0xFF	; 255
 dcc:	91 05       	cpc	r25, r1
 dce:	79 f4       	brne	.+30     	; 0xdee <__unpack_f+0xac>
 dd0:	21 15       	cp	r18, r1
 dd2:	31 05       	cpc	r19, r1
 dd4:	41 05       	cpc	r20, r1
 dd6:	51 05       	cpc	r21, r1
 dd8:	19 f4       	brne	.+6      	; 0xde0 <__unpack_f+0x9e>
 dda:	84 e0       	ldi	r24, 0x04	; 4
 ddc:	80 83       	st	Z, r24
 dde:	08 95       	ret
 de0:	44 ff       	sbrs	r20, 4
 de2:	03 c0       	rjmp	.+6      	; 0xdea <__unpack_f+0xa8>
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	80 83       	st	Z, r24
 de8:	10 c0       	rjmp	.+32     	; 0xe0a <__unpack_f+0xc8>
 dea:	10 82       	st	Z, r1
 dec:	0e c0       	rjmp	.+28     	; 0xe0a <__unpack_f+0xc8>
 dee:	8f 57       	subi	r24, 0x7F	; 127
 df0:	90 40       	sbci	r25, 0x00	; 0
 df2:	93 83       	std	Z+3, r25	; 0x03
 df4:	82 83       	std	Z+2, r24	; 0x02
 df6:	83 e0       	ldi	r24, 0x03	; 3
 df8:	80 83       	st	Z, r24
 dfa:	87 e0       	ldi	r24, 0x07	; 7
 dfc:	22 0f       	add	r18, r18
 dfe:	33 1f       	adc	r19, r19
 e00:	44 1f       	adc	r20, r20
 e02:	55 1f       	adc	r21, r21
 e04:	8a 95       	dec	r24
 e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0xba>
 e08:	50 64       	ori	r21, 0x40	; 64
 e0a:	24 83       	std	Z+4, r18	; 0x04
 e0c:	35 83       	std	Z+5, r19	; 0x05
 e0e:	46 83       	std	Z+6, r20	; 0x06
 e10:	57 83       	std	Z+7, r21	; 0x07
 e12:	08 95       	ret

00000e14 <__fpcmp_parts_f>:
 e14:	fc 01       	movw	r30, r24
 e16:	db 01       	movw	r26, r22
 e18:	90 81       	ld	r25, Z
 e1a:	92 30       	cpi	r25, 0x02	; 2
 e1c:	08 f4       	brcc	.+2      	; 0xe20 <__fpcmp_parts_f+0xc>
 e1e:	49 c0       	rjmp	.+146    	; 0xeb2 <__fpcmp_parts_f+0x9e>
 e20:	8c 91       	ld	r24, X
 e22:	82 30       	cpi	r24, 0x02	; 2
 e24:	08 f4       	brcc	.+2      	; 0xe28 <__fpcmp_parts_f+0x14>
 e26:	45 c0       	rjmp	.+138    	; 0xeb2 <__fpcmp_parts_f+0x9e>
 e28:	94 30       	cpi	r25, 0x04	; 4
 e2a:	51 f4       	brne	.+20     	; 0xe40 <__fpcmp_parts_f+0x2c>
 e2c:	61 81       	ldd	r22, Z+1	; 0x01
 e2e:	84 30       	cpi	r24, 0x04	; 4
 e30:	b1 f5       	brne	.+108    	; 0xe9e <__fpcmp_parts_f+0x8a>
 e32:	11 96       	adiw	r26, 0x01	; 1
 e34:	2c 91       	ld	r18, X
 e36:	11 97       	sbiw	r26, 0x01	; 1
 e38:	30 e0       	ldi	r19, 0x00	; 0
 e3a:	26 1b       	sub	r18, r22
 e3c:	31 09       	sbc	r19, r1
 e3e:	41 c0       	rjmp	.+130    	; 0xec2 <__fpcmp_parts_f+0xae>
 e40:	84 30       	cpi	r24, 0x04	; 4
 e42:	21 f0       	breq	.+8      	; 0xe4c <__fpcmp_parts_f+0x38>
 e44:	92 30       	cpi	r25, 0x02	; 2
 e46:	41 f4       	brne	.+16     	; 0xe58 <__fpcmp_parts_f+0x44>
 e48:	82 30       	cpi	r24, 0x02	; 2
 e4a:	b1 f1       	breq	.+108    	; 0xeb8 <__fpcmp_parts_f+0xa4>
 e4c:	11 96       	adiw	r26, 0x01	; 1
 e4e:	8c 91       	ld	r24, X
 e50:	11 97       	sbiw	r26, 0x01	; 1
 e52:	88 23       	and	r24, r24
 e54:	a1 f1       	breq	.+104    	; 0xebe <__fpcmp_parts_f+0xaa>
 e56:	2d c0       	rjmp	.+90     	; 0xeb2 <__fpcmp_parts_f+0x9e>
 e58:	61 81       	ldd	r22, Z+1	; 0x01
 e5a:	82 30       	cpi	r24, 0x02	; 2
 e5c:	01 f1       	breq	.+64     	; 0xe9e <__fpcmp_parts_f+0x8a>
 e5e:	11 96       	adiw	r26, 0x01	; 1
 e60:	8c 91       	ld	r24, X
 e62:	11 97       	sbiw	r26, 0x01	; 1
 e64:	68 17       	cp	r22, r24
 e66:	d9 f4       	brne	.+54     	; 0xe9e <__fpcmp_parts_f+0x8a>
 e68:	22 81       	ldd	r18, Z+2	; 0x02
 e6a:	33 81       	ldd	r19, Z+3	; 0x03
 e6c:	12 96       	adiw	r26, 0x02	; 2
 e6e:	8d 91       	ld	r24, X+
 e70:	9c 91       	ld	r25, X
 e72:	13 97       	sbiw	r26, 0x03	; 3
 e74:	82 17       	cp	r24, r18
 e76:	93 07       	cpc	r25, r19
 e78:	94 f0       	brlt	.+36     	; 0xe9e <__fpcmp_parts_f+0x8a>
 e7a:	28 17       	cp	r18, r24
 e7c:	39 07       	cpc	r19, r25
 e7e:	bc f0       	brlt	.+46     	; 0xeae <__fpcmp_parts_f+0x9a>
 e80:	24 81       	ldd	r18, Z+4	; 0x04
 e82:	35 81       	ldd	r19, Z+5	; 0x05
 e84:	46 81       	ldd	r20, Z+6	; 0x06
 e86:	57 81       	ldd	r21, Z+7	; 0x07
 e88:	14 96       	adiw	r26, 0x04	; 4
 e8a:	8d 91       	ld	r24, X+
 e8c:	9d 91       	ld	r25, X+
 e8e:	0d 90       	ld	r0, X+
 e90:	bc 91       	ld	r27, X
 e92:	a0 2d       	mov	r26, r0
 e94:	82 17       	cp	r24, r18
 e96:	93 07       	cpc	r25, r19
 e98:	a4 07       	cpc	r26, r20
 e9a:	b5 07       	cpc	r27, r21
 e9c:	18 f4       	brcc	.+6      	; 0xea4 <__fpcmp_parts_f+0x90>
 e9e:	66 23       	and	r22, r22
 ea0:	41 f0       	breq	.+16     	; 0xeb2 <__fpcmp_parts_f+0x9e>
 ea2:	0d c0       	rjmp	.+26     	; 0xebe <__fpcmp_parts_f+0xaa>
 ea4:	28 17       	cp	r18, r24
 ea6:	39 07       	cpc	r19, r25
 ea8:	4a 07       	cpc	r20, r26
 eaa:	5b 07       	cpc	r21, r27
 eac:	28 f4       	brcc	.+10     	; 0xeb8 <__fpcmp_parts_f+0xa4>
 eae:	66 23       	and	r22, r22
 eb0:	31 f0       	breq	.+12     	; 0xebe <__fpcmp_parts_f+0xaa>
 eb2:	21 e0       	ldi	r18, 0x01	; 1
 eb4:	30 e0       	ldi	r19, 0x00	; 0
 eb6:	05 c0       	rjmp	.+10     	; 0xec2 <__fpcmp_parts_f+0xae>
 eb8:	20 e0       	ldi	r18, 0x00	; 0
 eba:	30 e0       	ldi	r19, 0x00	; 0
 ebc:	02 c0       	rjmp	.+4      	; 0xec2 <__fpcmp_parts_f+0xae>
 ebe:	2f ef       	ldi	r18, 0xFF	; 255
 ec0:	3f ef       	ldi	r19, 0xFF	; 255
 ec2:	c9 01       	movw	r24, r18
 ec4:	08 95       	ret

00000ec6 <__prologue_saves__>:
 ec6:	2f 92       	push	r2
 ec8:	3f 92       	push	r3
 eca:	4f 92       	push	r4
 ecc:	5f 92       	push	r5
 ece:	6f 92       	push	r6
 ed0:	7f 92       	push	r7
 ed2:	8f 92       	push	r8
 ed4:	9f 92       	push	r9
 ed6:	af 92       	push	r10
 ed8:	bf 92       	push	r11
 eda:	cf 92       	push	r12
 edc:	df 92       	push	r13
 ede:	ef 92       	push	r14
 ee0:	ff 92       	push	r15
 ee2:	0f 93       	push	r16
 ee4:	1f 93       	push	r17
 ee6:	cf 93       	push	r28
 ee8:	df 93       	push	r29
 eea:	cd b7       	in	r28, 0x3d	; 61
 eec:	de b7       	in	r29, 0x3e	; 62
 eee:	ca 1b       	sub	r28, r26
 ef0:	db 0b       	sbc	r29, r27
 ef2:	0f b6       	in	r0, 0x3f	; 63
 ef4:	f8 94       	cli
 ef6:	de bf       	out	0x3e, r29	; 62
 ef8:	0f be       	out	0x3f, r0	; 63
 efa:	cd bf       	out	0x3d, r28	; 61
 efc:	09 94       	ijmp

00000efe <__epilogue_restores__>:
 efe:	2a 88       	ldd	r2, Y+18	; 0x12
 f00:	39 88       	ldd	r3, Y+17	; 0x11
 f02:	48 88       	ldd	r4, Y+16	; 0x10
 f04:	5f 84       	ldd	r5, Y+15	; 0x0f
 f06:	6e 84       	ldd	r6, Y+14	; 0x0e
 f08:	7d 84       	ldd	r7, Y+13	; 0x0d
 f0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f10:	b9 84       	ldd	r11, Y+9	; 0x09
 f12:	c8 84       	ldd	r12, Y+8	; 0x08
 f14:	df 80       	ldd	r13, Y+7	; 0x07
 f16:	ee 80       	ldd	r14, Y+6	; 0x06
 f18:	fd 80       	ldd	r15, Y+5	; 0x05
 f1a:	0c 81       	ldd	r16, Y+4	; 0x04
 f1c:	1b 81       	ldd	r17, Y+3	; 0x03
 f1e:	aa 81       	ldd	r26, Y+2	; 0x02
 f20:	b9 81       	ldd	r27, Y+1	; 0x01
 f22:	ce 0f       	add	r28, r30
 f24:	d1 1d       	adc	r29, r1
 f26:	0f b6       	in	r0, 0x3f	; 63
 f28:	f8 94       	cli
 f2a:	de bf       	out	0x3e, r29	; 62
 f2c:	0f be       	out	0x3f, r0	; 63
 f2e:	cd bf       	out	0x3d, r28	; 61
 f30:	ed 01       	movw	r28, r26
 f32:	08 95       	ret

00000f34 <_exit>:
 f34:	f8 94       	cli

00000f36 <__stop_program>:
 f36:	ff cf       	rjmp	.-2      	; 0xf36 <__stop_program>
